ㅑexport default {
  methods: {
    isSingleTree(nodes, links) {
      // 모든 노드 ID 찾기
      const nodeIds = new Set(nodes.map(node => node.id));
      
      // 자식 노드 찾기 (links의 'to' 노드)
      const childNodes = new Set(links.map(link => link.to));
      
      // 루트 노드 찾기 (자식이 아닌 노드)
      const rootNodes = new Set([...nodeIds].filter(x => !childNodes.has(x)));
      
      // 정확히 하나의 루트 노드가 있는지 확인
      if (rootNodes.size !== 1) {
        return {
          isValid: false,
          message: "루트 노드가 정확히 하나여야 합니다."
        };
      }
      
      // 루트 노드를 제외한 모든 노드가 부모를 가지고 있는지 확인
      for (let nodeId of nodeIds) {
        if (!childNodes.has(nodeId) && !rootNodes.has(nodeId)) {
          return {
            isValid: false,
            message: `노드 ${nodeId}에 부모가 없습니다.`
          };
        }
      }
      
      return {
        isValid: true,
        message: "유효한 단일 트리 구조입니다."
      };
    }
  }
}


부모없는 노드 여러 개일 때 한 번에 표시

export default {
  methods: {
    isSingleTree(nodes, links) {
      // 모든 노드 ID 찾기
      const nodeIds = new Set(nodes.map(node => node.id));
      
      // 자식 노드 찾기 (links의 'to' 노드)
      const childNodes = new Set(links.map(link => link.to));
      
      // 루트 노드 찾기 (자식이 아닌 노드)
      const rootNodes = new Set([...nodeIds].filter(x => !childNodes.has(x)));
      
      // 정확히 하나의 루트 노드가 있는지 확인
      if (rootNodes.size !== 1) {
        return {
          isValid: false,
          message: "루트 노드가 정확히 하나여야 합니다."
        };
      }
      
      // 부모가 없는 노드들을 찾기
      const nodesWithoutParent = [...nodeIds].filter(nodeId => 
        !childNodes.has(nodeId) && !rootNodes.has(nodeId)
      );
      
      // 부모가 없는 노드가 있는지 확인
      if (nodesWithoutParent.length > 0) {
        return {
          isValid: false,
          message: `다음 노드들에 부모가 없습니다: ${nodesWithoutParent.join(', ')}`
        };
      }
      
      return {
        isValid: true,
        message: "유효한 단일 트리 구조입니다."
      };
    }
  }
}



단일 노드가 아닐 때 아닌 노드 메시지 표시
노드가 없을 때 메시지 호출

export default {
  methods: {
    isSingleTree(nodes, links) {
      // 모든 노드 ID 찾기
      const nodeIds = new Set(nodes.map(node => node.id));
      
      // 자식 노드 찾기 (links의 'to' 노드)
      const childNodes = new Set(links.map(link => link.to));
      
      // 루트 노드 찾기 (자식이 아닌 노드)
      const rootNodes = new Set([...nodeIds].filter(x => !childNodes.has(x)));
      
      // 루트 노드가 하나 이상인 경우 처리
      if (rootNodes.size > 1) {
        const invalidRootNodes = nodes
          .filter(node => rootNodes.has(node.id) && node.displayLabel !== 'Start')
          .map(node => `${node.id} (${node.displayLabel})`);

        return {
          isValid: false,
          message: `루트 노드가 여러 개이며, 다음 노드들의 디스플레이 라벨이 'Start'가 아닙니다: ${invalidRootNodes.join(', ')}`
        };
      }
      
      // 루트 노드가 없는 경우 처리
      if (rootNodes.size === 0) {
        return {
          isValid: false,
          message: "루트 노드가 없습니다."
        };
      }
      
      // 부모가 없는 노드들을 찾기
      const nodesWithoutParent = [...nodeIds].filter(nodeId => 
        !childNodes.has(nodeId) && !rootNodes.has(nodeId)
      );
      
      // 부모가 없는 노드가 있는지 확인
      if (nodesWithoutParent.length > 0) {
        return {
          isValid: false,
          message: `다음 노드들에 부모가 없습니다: ${nodesWithoutParent.join(', ')}`
        };
      }
      
      return {
        isValid: true,
        message: "유효한 단일 트리 구조입니다."
      };
    }
  }
}




ㅡㅡㅡㅡㅡ
사용 예제

// 컴포넌트 내부에서
methods: {
  checkTreeStructure() {
    const result = this.isSingleTree(this.nodes, this.links);
    if (result.isValid) {
      console.log(result.message);
    } else {
      console.error(result.message);
    }
  }
}




ㅡㅡㅡㅡㅡ

logic 버전


function isSingleTreeLogic(logic) {
  const nodes = Array.from(logic.values());
  const rootNodes = nodes.filter(node => !nodes.some(n => n.nextYesNodeId === node.nodeId || n.nextNoNodeId === node.nodeId));
  const nodesWithoutParent = nodes.filter(node => node !== rootNodes[0] && !nodes.some(n => n.nextYesNodeId === node.nodeId || n.nextNoNodeId === node.nodeId));

  if (rootNodes.length !== 1) {
    const invalidRoots = rootNodes.filter(node => node.displayLabel !== 'Start').map(node => `${node.nodeId} (${node.displayLabel})`);
    return {
      isValid: false,
      message: invalidRoots.length ? `루트 노드가 여러 개이며, 다음 노드들의 디스플레이 라벨이 'Start'가 아닙니다: ${invalidRoots.join(', ')}` : "루트 노드가 없습니다."
    };
  }

  return nodesWithoutParent.length === 0
    ? { isValid: true, message: "유효한 단일 트리 구조입니다." }
    : { isValid: false, message: `다음 노드들에 부모가 없습니다: ${nodesWithoutParent.map(n => n.nodeId).join(', ')}` };
}





ㅡㅡㅡㅡㅡㅡㅡㅡㅡ

function validateAndFindRootNode(nodes) {
  const rootConditions = {
    nodeId: node => node.nodeId === 1,
    nextNodes: node => node.nextYesNodeId && !node.nextNoNodeId,
    category: node => node.nodeCategory === 'start',
    condition: node => node.nodeCondition === 'True',
    noParent: node => !nodes.some(n => n.nextYesNodeId === node.nodeId || n.nextNoNodeId === node.nodeId)
  };

  const rootNode = nodes.find(node => Object.values(rootConditions).every(condition => condition(node)));

  if (!rootNode) {
    const failedConditions = Object.entries(rootConditions)
      .filter(([_, condition]) => !condition(nodes.find(n => n.nodeId === 1) || {}))
      .map(([key]) => key);

    return {
      isValid: false,
      message: {
        en: `Start node conditions not met: ${failedConditions.join(', ')}`,
        ko: `start 노드 조건 미충족: ${failedConditions.join(', ')}`
      }
    };
  }

  const nodesWithoutParent = nodes.filter(node => 
    node !== rootNode && rootConditions.noParent(node)
  );

  return { isValid: true, rootNode, nodesWithoutParent };
}




ㅡㅡㅡㅡㅡㅡ


function validateAndFindRootNode(nodes) {
  const rootConditions = {
    nodeId: node => node.nodeId === 1,
    nextNodes: node => node.nextYesNodeId && !node.nextNoNodeId,
    category: node => node.nodeCategory === 'start',
    condition: node => node.nodeCondition === 'True',
    noParent: node => !nodes.some(n => n.nextYesNodeId === node.nodeId || n.nextNoNodeId === node.nodeId)
  };

  const potentialRootNode = nodes.find(node => node.nodeId === 1);

  if (!potentialRootNode) {
    return {
      isValid: false,
      message: {
        en: "The root node is missing.",
        ko: "루트 노드가 없습니다."
      }
    };
  }

  const rootNode = Object.values(rootConditions).every(condition => condition(potentialRootNode))
    ? potentialRootNode
    : null;

  if (!rootNode) {
    const failedConditions = Object.entries(rootConditions)
      .filter(([_, condition]) => !condition(potentialRootNode))
      .map(([key]) => key);

    return {
      isValid: false,
      message: {
        en: `The start node does not satisfy the following conditions: ${failedConditions.join(', ')}.`,
        ko: `start 노드의 조건을 만족하지 않습니다: ${failedConditions.join(', ')}.`
      }
    };
  }

  const nodesWithoutParent = nodes.filter(node => 
    node !== rootNode && rootConditions.noParent(node)
  );

  return { isValid: true, rootNode, nodesWithoutParent };
}


