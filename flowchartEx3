methods: {
  updateMinimapViewportRect(flowchartTransform) {
    const { x, y, scale } = flowchartTransform;

    const fcWidth = this.flowchartNodeBounds.width;
    const fcHeight = this.flowchartNodeBounds.height;

    const mmWidth = this.minimapNodeBounds.width;
    const mmHeight = this.minimapNodeBounds.height;

    // 축별 비율 계산 (가로/세로 독립적)
    const ratioX = mmWidth / fcWidth;
    const ratioY = mmHeight / fcHeight;

    // 현재 보이는 영역 크기(flowchart 기준)
    const visibleWidth = this.flowchartContainer.clientWidth / scale;
    const visibleHeight = this.flowchartContainer.clientHeight / scale;

    // 🔥 변경된 부분: 화면 중앙 좌표를 기준으로 계산 🔥
    // 현재 보이는 영역의 중앙 좌표 (flowchart 기준)
    const centerX = (-x / scale) + visibleWidth / 2;
    const centerY = (-y / scale) + visibleHeight / 2;

    // 미니맵에서 viewportRect 위치 계산 (중앙 기준)
    let viewportWidth = visibleWidth * ratioX;
    let viewportHeight = visibleHeight * ratioY;

    let viewportX = (centerX * ratioX + this.minimapNodeBounds.left) - viewportWidth / 2;
    let viewportY = (centerY * ratioY + this.minimapNodeBounds.top) - viewportHeight / 2;

    // 🔥 제한 로직 유지: minimapNodeBounds 영역 내로 제한 🔥
    const minX = this.minimapNodeBounds.left;
    const minY = this.minimapNodeBounds.top;
    const maxX = this.minimapNodeBounds.left + mmWidth - viewportWidth;
    const maxY = this.minimapNodeBounds.top + mmHeight - viewportHeight;

    if (viewportWidth >= mmWidth) {
      viewportX = minX;
      viewportWidth = mmWidth;
    } else {
      viewportX = Math.max(minX, Math.min(maxX, viewportX));
    }

    if (viewportHeight >= mmHeight) {
      viewportY = minY;
      viewportHeight = mmHeight;
    } else {
      viewportY = Math.max(minY, Math.min(maxY, viewportY));
    }

    // 기존 값과 비교하여 변경된 값만 업데이트
    if (
      this.viewportRect.x !== viewportX ||
      this.viewportRect.y !== viewportY ||
      this.viewportRect.width !== viewportWidth ||
      this.viewportRect.height !== viewportHeight
    ) {
      this.viewportRect = {
        x: viewportX,
        y: viewportY,
        width: viewportWidth,
        height: viewportHeight
      };
    }
  }
}
