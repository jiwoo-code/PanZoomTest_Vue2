

---

목표

listA와 listB를 eqpId 기준으로 병합

각 쌍을 하나의 MergedResultVO로 가공

stream 하나로 합치기



---

1. 전제 조건

List<SourceAVO> listA = mapper.selectFromTableA(eqpList);
List<SourceBVO> listB = mapper.selectFromTableB(eqpList);


---

2. 리팩터링 코드 – 람다로 병합 처리

Map<String, SourceBVO> bMap = listB.stream()
    .collect(Collectors.toMap(SourceBVO::getEqpId, Function.identity()));

List<MergedResultVO> result = listA.stream()
    .map(a -> {
        SourceBVO b = bMap.get(a.getEqpId());

        return MergedResultVO.builder()
            .eqpId(a.getEqpId())
            .d1(a.getD1())
            .d2(a.getD2())
            .d3(a.getD3())
            .status(b != null ? b.getStatus() : null)
            .version(b != null ? b.getVersion() : null)
            .compareStatus(b != null && Objects.equals(a.getD1(), b.getStatus()) ? "O" : "X")
            .versionGap(calcVersionGap(a.getD2(), b != null ? b.getVersion() : null))
            .syncState(b != null ? determineSyncState(b.getStatus()) : "ERROR")
            .build();
    })
    .collect(Collectors.toList());


---

3. 유틸 메서드 (같이 포함)

private String calcVersionGap(String v1, String v2) {
    try {
        return String.valueOf(Integer.parseInt(v2) - Integer.parseInt(v1));
    } catch (Exception e) {
        return "X";
    }
}

private String determineSyncState(String status) {
    return switch (status) {
        case "COMPLETED" -> "OK";
        case "PENDING" -> "PENDING";
        default -> "ERROR";
    };
}


---

4. VO에 빌더 추가 필요

MergedResultVO에 Lombok의 @Builder 추가:

@Data
@Builder
public class MergedResultVO {
    private String eqpId;
    private String d1;
    private String d2;
    private String d3;
    private String status;
    private String version;
    private String compareStatus;
    private String versionGap;
    private String syncState;
}


---

결론

> Java에서도 람다 + stream으로 충분히 직관적이고 간결하게 병합 가능합니다.
LINQ는 없지만, stream은 그에 버금가는 기능을 제공합니다.



이 스타일이 지우님이 원하는 “읽기 쉬운 병합 로직”에 훨씬 가까울 거예요.
이제 더 복잡한 조건도 람다로 확장하기도 쉬워지겠죠!



import com.fasterxml.jackson.annotation.JsonProperty;

@Data
public class MergedResultVO {

    private BigDecimal lower;
    private BigDecimal q1;
    private BigDecimal upper;
    private BigDecimal q2;

    @JsonProperty("newProp")
    public boolean isNewProp() {
        return isValidLower() && isValidUpper();
    }

    private boolean isValidLower() {
        return lower != null && q1 != null && lower.compareTo(q1) >= 0;
    }

    private boolean isValidUpper() {
        return upper != null && q2 != null && upper.compareTo(q2) <= 0;
    }
}
















// VO 클래스들
package com.example.demo.vo;

import lombok.Data;

@Data
public class SourceA {
    private Long id;
    private String name;
    private String modelNumber;
    private String manufacturer;
    // 기타 필요한 필드들
}

@Data
public class SourceB {
    private Long id;
    private String deviceName;
    private String serial;
    private String maker;
    // 기타 필요한 필드들
}

@Data
public class MergedResultVO {
    // 원본 데이터 필드
    private Long sourceAId;
    private String sourceAName;
    private String sourceAModelNumber;
    private String sourceAManufacturer;
    
    private Long sourceBId;
    private String sourceBDeviceName;
    private String sourceBSerial;
    private String sourceBMaker;
    
    // 결과 포함 3개 컬럼
    private String mergeResult;     // 병합 결과 (성공/실패)
    private String mergeMessage;    // 병합 관련 메시지
    private String mergeDate;       // 병합 일자
}

// Mapper 인터페이스
package com.example.demo.mapper;

import com.example.demo.vo.SourceA;
import com.example.demo.vo.SourceB;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Select;

import java.util.List;

@Mapper
public interface EqpMergeMapper {
    
    @Select("SELECT * FROM table_a")
    List<SourceA> selectFromTableA();
    
    @Select("SELECT * FROM table_b")
    List<SourceB> selectFromTableB();
}

// Service 인터페이스
package com.example.demo.service;

import com.example.demo.vo.MergedResultVO;
import java.util.List;

public interface EqpMergeService {
    List<MergedResultVO> getMergedEqpData();
}

// Service 구현체
package com.example.demo.service.impl;

import com.example.demo.mapper.EqpMergeMapper;
import com.example.demo.service.EqpMergeService;
import com.example.demo.vo.MergedResultVO;
import com.example.demo.vo.SourceA;
import com.example.demo.vo.SourceB;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Service
public class EqpMergeServiceImpl implements EqpMergeService {

    @Autowired
    private EqpMergeMapper eqpMergeMapper;

    @Override
    public List<MergedResultVO> getMergedEqpData() {
        // 두 테이블에서 데이터 조회
        List<SourceA> sourceAList = eqpMergeMapper.selectFromTableA();
        List<SourceB> sourceBList = eqpMergeMapper.selectFromTableB();
        
        // 결과를 담을 리스트
        List<MergedResultVO> resultList = new ArrayList<>();
        
        // SourceB 데이터를 ID로 맵핑하여 조회 최적화
        Map<Long, SourceB> sourceBMap = sourceBList.stream()
                .collect(Collectors.toMap(SourceB::getId, sourceB -> sourceB));
        
        // 현재 시간 가져오기 (병합 일자용)
        String currentDate = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
        
        // SourceA를 기준으로 병합
        for (SourceA sourceA : sourceAList) {
            MergedResultVO mergedResult = new MergedResultVO();
            
            // SourceA 데이터 설정
            mergedResult.setSourceAId(sourceA.getId());
            mergedResult.setSourceAName(sourceA.getName());
            mergedResult.setSourceAModelNumber(sourceA.getModelNumber());
            mergedResult.setSourceAManufacturer(sourceA.getManufacturer());
            
            // 매칭되는 SourceB 데이터 찾기
            SourceB matchedSourceB = sourceBMap.get(sourceA.getId());
            
            if (matchedSourceB != null) {
                // SourceB 데이터 설정
                mergedResult.setSourceBId(matchedSourceB.getId());
                mergedResult.setSourceBDeviceName(matchedSourceB.getDeviceName());
                mergedResult.setSourceBSerial(matchedSourceB.getSerial());
                mergedResult.setSourceBMaker(matchedSourceB.getMaker());
                
                // 병합 성공 결과 설정
                mergedResult.setMergeResult("SUCCESS");
                mergedResult.setMergeMessage("두 소스의 데이터가 성공적으로 병합되었습니다.");
            } else {
                // 병합 실패 결과 설정
                mergedResult.setMergeResult("FAILURE");
                mergedResult.setMergeMessage("매칭되는 SourceB 데이터를 찾을 수 없습니다.");
            }
            
            // 병합 일자 설정
            mergedResult.setMergeDate(currentDate);
            
            // 결과 리스트에 추가
            resultList.add(mergedResult);
        }
        
        return resultList;
    }
}

// Controller
package com.example.demo.controller;

import com.example.demo.service.EqpMergeService;
import com.example.demo.vo.MergedResultVO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
@RequestMapping("/api/eqps")
public class EqpMergeController {

    @Autowired
    private EqpMergeService eqpMergeService;
    
    @GetMapping("/merged")
    public ResponseEntity<List<MergedResultVO>> getMergedEqps() {
        List<MergedResultVO> mergedResults = eqpMergeService.getMergedEqpData();
        return ResponseEntity.ok(mergedResults);
    }
}