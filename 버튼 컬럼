columnDefs: [
  // 기존 컬럼들...
  {
    headerName: '히스토리',
    field: 'history',
    cellRendererFramework: {
      render: {
        functional: true,
        render(h, context) {
          return h(
            'button',
            {
              on: {
                click: () => context.parent.$emit('history-click', context.props.data)
              }
            },
            '보기'
          );
        }
      }
    },
    width: 100
  }
]






ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


data() {
  return {
    showHistoryPopup: false,
    historyRowData: null
  };
}




ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ






---

✅ 전체 구성 요약

구성 요소	설명

히스토리 컬럼 추가	컬럼 정의에 버튼 렌더러 추가
버튼 클릭 이벤트	클릭된 row의 데이터와 함께 this.$emit()
팝업	grid.vue에서 showHistoryPopup과 popupData로 상태 제어



---

✅ 1. grid.vue – 히스토리 컬럼 추가

① 컬럼 정의 추가

columnDefs: [
  // 기존 컬럼들...
  {
    headerName: '히스토리',
    field: 'history',
    cellRendererFramework: {
      render: {
        functional: true,
        render(h, context) {
          return h(
            'button',
            {
              on: {
                click: () => context.parent.$emit('history-click', context.props.data)
              }
            },
            '보기'
          );
        }
      }
    },
    width: 100
  }
]

※ cellRendererFramework 방식은 Vue2에서 버튼 렌더링에 가장 간단하고 효과적입니다.


---

✅ 2. grid.vue – 히스토리 팝업 상태 관리

① data() 추가

data() {
  return {
    showHistoryPopup: false,
    historyRowData: null
  };
}

② created 또는 mounted에서 이벤트 연결

created() {
  this.$on('history-click', this.onHistoryClick);
}

③ methods

methods: {
  onHistoryClick(rowData) {
    this.historyRowData = rowData;
    this.showHistoryPopup = true;
  },
  closeHistoryPopup() {
    this.showHistoryPopup = false;
    this.historyRowData = null;
  }
}


---

✅ 3. template에 팝업 추가

<Popup v-if="showHistoryPopup" @close="closeHistoryPopup">
  <div class="popup-content">
    <h3>히스토리 정보</h3>
    <pre>{{ historyRowData }}</pre>
    <button @click="closeHistoryPopup">닫기</button>
  </div>
</Popup>

※ Popup 컴포넌트는 간단한 slot + 닫기 기능만 가진 모달로 대체 가능합니다.


---

✅ 4. 간단한 Popup.vue 예시 (slot 사용)

<template>
  <div class="popup-overlay">
    <div class="popup-box">
      <slot />
    </div>
  </div>
</template>

<script>
export default {
  name: 'Popup',
  methods: {
    close() {
      this.$emit('close');
    }
  }
};
</script>

<style scoped>
.popup-overlay {
  position: fixed;
  top: 0; left: 0;
  width: 100%; height: 100%;
  background: rgba(0, 0, 0, 0.5);
}
.popup-box {
  background: white;
  padding: 20px;
  margin: 100px auto;
  width: 400px;
  border-radius: 8px;
}
</style>


---

✅ 요약

구성	설명

컬럼 정의	버튼 cellRenderer 추가
버튼 클릭	this.$emit('history-click', rowData)
팝업 열기	showHistoryPopup = true, 데이터 전달
팝업 닫기	@close → 상태 초기화
