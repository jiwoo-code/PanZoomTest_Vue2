// CellButton.js – Vue 파일을 .js로 구현한 ag-Grid 셀 버튼 렌더러
// Vue 파일의 동작을 그대로 JavaScript로 구현

export class CellButton {
  /** @param {ICellRendererParams} params */
  init(params) {
    this.params = params;

    // sp-button 엘리먼트 생성
    const btn = document.createElement('sp-button');
    btn.setAttribute('small', '');
    btn.style.height = '24px';

    // 라벨 설정 (cellRendererParams.label 또는 빈 문자열)
    const label = params?.colDef?.cellRendererParams?.label || '';
    btn.textContent = label;

    // 추가 스타일이 있다면 적용
    const extraStyle = params?.colDef?.cellRendererParams?.style;
    if (extraStyle) {
      btn.style.cssText += `;${extraStyle}`;
    }

    // 클릭 이벤트 처리 - Vue의 onClick 메서드와 동일한 로직
    btn.addEventListener('click', () => {
      this.onClick();
    });

    this.eGui = btn;
  }

  // Vue의 onClick 메서드를 JavaScript로 구현
  onClick() {
    // Vue 컴포넌트 찾기
    let vueComponent = this.findVueComponent();
    
    if (vueComponent && typeof vueComponent.$emit === 'function') {
      // Vue 파일과 동일한 이벤트 emit
      vueComponent.$emit('cellBtnClick', {
        colId: this.params.column.getColId(),
        data: this.params.data
      });
      console.log('cellBtnClick 이벤트 emit 완료');
    } else {
      console.warn('Vue 컴포넌트를 찾을 수 없습니다.');
    }
  }

  // Vue 컴포넌트를 찾는 헬퍼 메서드
  findVueComponent() {
    // 방법 1: context.componentParent
    if (this.params.context && this.params.context.componentParent) {
      return this.params.context.componentParent;
    }

    // 방법 2: gridOptions에서 찾기
    try {
      const gridOptions = this.params.api.getGridOptions();
      if (gridOptions.context && gridOptions.context.componentParent) {
        return gridOptions.context.componentParent;
      }
    } catch (e) {
      console.warn('gridOptions 접근 실패:', e);
    }

    // 방법 3: DOM 트리에서 Vue 인스턴스 찾기
    let element = this.eGui;
    while (element && element.parentElement) {
      element = element.parentElement;
      if (element.__vue__) {
        return element.__vue__;
      }
      // ag-grid 관련 클래스에서 찾기
      if (element.classList.contains('ag-root-wrapper') || 
          element.classList.contains('ag-root')) {
        if (element.__vue__) {
          return element.__vue__;
        }
      }
    }

    return null;
  }

  getGui() {
    return this.eGui;
  }

  refresh(params) {
    this.params = params;

    // 라벨 업데이트
    const newLabel = params?.colDef?.cellRendererParams?.label || '';
    if (this.eGui.textContent !== newLabel) {
      this.eGui.textContent = newLabel;
    }

    // 스타일 업데이트
    const newStyle = params?.colDef?.cellRendererParams?.style;
    if (newStyle) {
      // 기본 스타일 유지하면서 새 스타일 적용
      this.eGui.style.height = '24px';
      this.eGui.style.cssText += `;${newStyle}`;
    }

    return true;
  }

  destroy() {
    if (this.eGui) {
      // 이벤트 리스너 정리 (메모리 누수 방지)
      this.eGui.removeEventListener('click', this.onClick);
      this.eGui.remove();
      this.eGui = null;
    }
    this.params = null;
  }
}

/* ========== 사용 예 ==========

1. Vue 컴포넌트에서 ag-grid 설정:
data() {
  return {
    gridOptions: {
      context: {
        componentParent: this  // 중요: Vue 컴포넌트 인스턴스 전달
      },
      columnDefs: [
        {
          field: 'action',
          headerName: 'Action',
          cellRenderer: CellButton,
          cellRendererParams: {
            label: '상세보기',
            style: 'background:#1976d2; color:white; border-color:#1976d2;'
          },
          width: 120,
          resizable: false,
          sortable: false
        }
      ]
    }
  }
}

2. Vue 템플릿:
<template>
  <ag-grid-vue
    :gridOptions="gridOptions"
    @cellBtnClick="onCellBtnClick"
    ...
  />
</template>

3. 이벤트 핸들러:
methods: {
  onCellBtnClick(eventData) {
    console.log('셀 버튼 클릭:', eventData);
    console.log('컬럼 ID:', eventData.colId);
    console.log('행 데이터:', eventData.data);
    
    // 원하는 로직 구현
    if (eventData.colId === 'action') {
      this.showDetail(eventData.data);
    }
  },
  
  showDetail(rowData) {
    // 상세보기 로직
  }
}

*/