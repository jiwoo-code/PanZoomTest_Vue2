// CellButtonRenderer.js – 재사용 가능한 ag‑Grid 셀 버튼 렌더러 (<sp-button>)
//  • cellRendererParams.label  → 버튼 텍스트 (기본: '버튼')
//  • cellRendererParams.style  → 추가 인라인 스타일 문자열
//  • **Vue 쪽으로만** 'cell-button-click' 이벤트 emit  (ag‑Grid 내부 이벤트는 제거)

export class CellButtonRenderer {
  /** @param {ICellRendererParams} params */
  init(params) {
    this.params = params;

    /* 1️⃣ <sp-button> 생성 */
    const btn = document.createElement('sp-button');
    btn.setAttribute('small', '');
    btn.style.height = '24px';

    /* 라벨 지정 */
    const label = params?.colDef?.cellRendererParams?.label || '버튼';
    btn.textContent = label;

    /* 추가 스타일 주입 */
    const extra = params?.colDef?.cellRendererParams?.style;
    if (extra) btn.style.cssText += `;${extra}`;

    /* 2️⃣ 클릭 → Vue componentParent 로 emit (컬럼 ID 포함) */
    btn.addEventListener('click', () => {
      const parent = params.context && params.context.componentParent;
      if (parent && parent.$emit) {
        parent.$emit('cell-button-click', {
          colId: params.column.getColId(), // 어느 컬럼인지 식별
          data : params.data               // 행 데이터
        });
      }
    });

    this.eGui = btn;
  }

  getGui() {
    return this.eGui;
  }

  refresh(params) {
    this.params = params;

    /* 라벨 & 스타일 갱신 */
    const lbl = params?.colDef?.cellRendererParams?.label;
    if (lbl) this.eGui.textContent = lbl;

    const sty = params?.colDef?.cellRendererParams?.style;
    if (sty) this.eGui.style.cssText += `;${sty}`;

    return true;
  }

  destroy() {
    this.eGui?.remove();
  }
}

/* ========== 사용 예 ==========
{
  field: 'action',
  headerName: 'Action',
  cellRenderer: CellButtonRenderer,
  cellRendererParams: {
    label: '상세',
    style: 'background:#e91e63; border-color:#e91e63;'
  }
}
*/


CellButtonRenderer.js를 Vue emit 전용으로 정리했습니다.

ag-Grid 내부 이벤트 부분 삭제

cell-button-click payload → { colId, data }


// 수신 예시 (부모 컴포넌트)
<ag-grid-vue
  :context="{ componentParent: this }"
  @cell-button-click="onCellBtn"
/>

methods: {
  onCellBtn({ colId, data }) {
    if (colId === 'action') {
      // 해당 컬럼 버튼 클릭 처리
    }
  }
}

탭 오른쪽 “CellButtonRenderer.js” 파일에서 최종 코드를 확인하실 수 있어요!

