// CellButtonRenderer.js – 재사용 가능한 ag‑Grid 셀 버튼 렌더러
//   • <sp-button small> 태그 사용 (프로젝트 공통 버튼)
//   • cellRendererParams.label 로 버튼 텍스트 지정 (기본: '버튼')
//   • 클릭 시 'cell-button-click' 이벤트를 ag-Grid API & Vue componentParent 로 전파

export class CellButtonRenderer {
  /** @param {ICellRendererParams} params */
  init(params) {
    this.params = params;

    /* 1️⃣ <sp-button> 엘리먼트 생성 */
    const btn = document.createElement('sp-button');
    btn.setAttribute('small', '');                 // small 속성
    btn.style.height = '24px';                     // 고정 높이

    const label = (params.colDef.cellRendererParams && params.colDef.cellRendererParams.label) || '버튼';
    btn.textContent = label;

    /* 2️⃣ 클릭 이벤트 – Vue & ag‑Grid 모두 전파 */
    btn.addEventListener('click', () => {
      // a) ag‑Grid 이벤트
      if (this.params && this.params.api) {
        this.params.api.dispatchEvent({ type: 'cell-button-click', data: this.params.data });
      }
      // b) Vue componentParent 이벤트
      if (this.params && this.params.context && this.params.context.componentParent) {
        this.params.context.componentParent.$emit('cell-button-click', this.params.data);
      }
    });

    this.eGui = btn;
  }

  getGui() {
    return this.eGui;
  }

  refresh(params) {
    // 라벨 변동 시 업데이트
    const newLabel = (params.colDef.cellRendererParams && params.colDef.cellRendererParams.label) || this.eGui.textContent;
    this.eGui.textContent = newLabel;
    this.params = params;
    return true;
  }

  destroy() {
    this.eGui?.remove();
  }
}

/*
// columnDefs 사용 예
{
  field: 'action',
  headerName: 'Action',
  cellRenderer: CellButtonRenderer,
  cellRendererParams: { label: '상세' }
}
*/