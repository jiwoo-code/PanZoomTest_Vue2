// CellButton.js – spButton.scss의 CSS 클래스를 활용한 ag-Grid 셀 버튼 렌더러

export class CellButton {
  /** @param {ICellRendererParams} params */
  init(params) {
    this.params = params;

    // 일반 button 엘리먼트 생성
    const btn = document.createElement('button');
    
    // spButton.scss에서 정의된 클래스들 적용
    // 일반적인 sp-button 클래스 구조 예상:
    btn.className = 'sp-button sp-button--small';
    
    // 또는 더 구체적인 클래스들이 있다면:
    // btn.className = 'sp-button sp-button--primary sp-button--small';
    
    // 추가 속성들
    btn.setAttribute('type', 'button');
    
    // 기본 스타일 (SCSS에서 정의되지 않은 ag-grid 특화 스타일들)
    btn.style.cssText = `
      height: 24px;
      width: 100%;
      box-sizing: border-box;
    `;

    // 라벨 설정
    const label = params?.colDef?.cellRendererParams?.label || '';
    btn.textContent = label;

    // cellRendererParams에서 추가 CSS 클래스 지정 가능
    const extraClasses = params?.colDef?.cellRendererParams?.className;
    if (extraClasses) {
      btn.className += ` ${extraClasses}`;
    }

    // 추가 인라인 스타일
    const extraStyle = params?.colDef?.cellRendererParams?.style;
    if (extraStyle) {
      btn.style.cssText += `;${extraStyle}`;
    }

    // 클릭 이벤트 처리
    btn.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      this.onClick();
    });

    this.eGui = btn;
  }

  onClick() {
    let vueComponent = this.findVueComponent();
    
    if (vueComponent && typeof vueComponent.$emit === 'function') {
      vueComponent.$emit('cellBtnClick', {
        colId: this.params.column.getColId(),
        data: this.params.data
      });
      console.log('cellBtnClick 이벤트 emit 완료');
    } else {
      console.warn('Vue 컴포넌트를 찾을 수 없습니다.');
    }
  }

  findVueComponent() {
    // 방법 1: context.componentParent
    if (this.params.context && this.params.context.componentParent) {
      return this.params.context.componentParent;
    }

    // 방법 2: gridOptions에서 찾기
    try {
      const gridOptions = this.params.api.getGridOptions();
      if (gridOptions.context && gridOptions.context.componentParent) {
        return gridOptions.context.componentParent;
      }
    } catch (e) {
      console.warn('gridOptions 접근 실패:', e);
    }

    // 방법 3: DOM 트리에서 Vue 인스턴스 찾기
    let element = this.eGui;
    while (element && element.parentElement) {
      element = element.parentElement;
      if (element.__vue__) {
        return element.__vue__;
      }
    }

    return null;
  }

  getGui() {
    return this.eGui;
  }

  refresh(params) {
    this.params = params;

    // 라벨 업데이트
    const newLabel = params?.colDef?.cellRendererParams?.label || '';
    if (this.eGui.textContent !== newLabel) {
      this.eGui.textContent = newLabel;
    }

    // 클래스 업데이트
    const newClasses = params?.colDef?.cellRendererParams?.className;
    if (newClasses) {
      // 기본 클래스는 유지하고 새 클래스 추가
      this.eGui.className = `sp-button sp-button--small ${newClasses}`;
    }

    // 스타일 업데이트
    const newStyle = params?.colDef?.cellRendererParams?.style;
    if (newStyle) {
      this.eGui.style.cssText += `;${newStyle}`;
    }

    return true;
  }

  destroy() {
    if (this.eGui) {
      this.eGui.remove();
      this.eGui = null;
    }
    this.params = null;
  }
}

/* ========== 사용 예 ==========

1. spButton.scss가 컴파일된 CSS가 이미 로드되어 있다고 가정

2. 컬럼 정의에서 SCSS 클래스 활용:
{
  field: 'action',
  headerName: 'Action',
  cellRenderer: CellButton,
  cellRendererParams: {
    label: '수정',
    className: 'sp-button--primary sp-button--rounded', // SCSS에서 정의된 추가 클래스들
    style: 'margin: 2px;' // 필요시 추가 인라인 스타일
  },
  width: 80
}

3. 다양한 버튼 스타일 예시:
// 기본 버튼
{ 
  cellRendererParams: { 
    label: '보기',
    className: 'sp-button--default' 
  } 
}

// 프라이머리 버튼  
{ 
  cellRendererParams: { 
    label: '수정',
    className: 'sp-button--primary' 
  } 
}

// 위험 버튼
{ 
  cellRendererParams: { 
    label: '삭제',
    className: 'sp-button--danger' 
  } 
}

// 아웃라인 버튼
{ 
  cellRendererParams: { 
    label: '취소',
    className: 'sp-button--outline' 
  } 
}

========= spButton.scss 활용을 위한 체크리스트 =========

1. spButton.scss가 빌드되어 CSS로 변환되었는지 확인
2. 해당 CSS 파일이 페이지에 로드되었는지 확인  
3. 실제 클래스명 확인 (개발자 도구에서 다른 sp-button 요소 검사)
4. 클래스명이 .sp-button, .sp-button--small 등인지 확인

// 실제 클래스명을 확인하려면:
console.log('현재 페이지의 sp-button:', document.querySelector('.sp-button'));

*/