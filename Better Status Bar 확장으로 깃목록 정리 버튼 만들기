vscode statusbar commands로 확장 사용

{
  "statusbarCommands.alignment": "Right",
  "statusbarCommands.commands": [
    {
      // 🗑 브랜치 삭제 버튼
      // - VS Code 내장 명령 실행
      // - "브랜치 삭제" 메뉴를 띄워 수동 선택 가능
      "statusBarText": "🗑 브랜치 삭제",
      "tooltipText": "브랜치 삭제 메뉴 열기",
      "color": "#ffb300",
      "command": "git.deleteBranch"
    },
    {
      // 🧹 브랜치 정리 버튼
      // - 기본 터미널(cmd) 안에서 PowerShell 호출
      // - 동작 순서:
      //   1. git fetch -p : 원격 삭제된 브랜치 참조 정리
      //   2. development에 병합된 로컬 브랜치 목록 추출
      //   3. main/master/development 브랜치는 건너뜀
      //   4. 원격에 없는 브랜치만 삭제
      //   5. 로그로 skipping / deleted / keeping 출력
      "statusBarText": "🧹 브랜치 정리",
  "tooltipText": "PowerShell로 브랜치 정리 실행 (development 기준, main/master/development 보호)",
  "color": "#c8c800",
  "command": "workbench.action.terminal.sendSequence",
  "args": [
    {
      "text": "powershell -NoProfile -Command \"git fetch -p; $branches = git for-each-ref --format='%(refname:short)' refs/heads --merged development; foreach ($b in $branches) { if ($b -in @('main','master','development')) { Write-Output \\\"skipping $b\\\" } else { git show-ref --verify --quiet \\\"refs/remotes/origin/$b\\\"; if ($LASTEXITCODE -ne 0) { git branch -d $b; if ($LASTEXITCODE -eq 0) { Write-Output \\\"deleted $b\\\" } else { Write-Output \\\"keeping $b\\\" } } else { Write-Output \\\"keeping $b\\\" } } }\"\u000D"
    }
  ]
    }
  ]
}