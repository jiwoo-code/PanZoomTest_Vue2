export default {
  data() {
    return {
      transParam: {},    // ✅ 기존 params 대신 사용하는 상태
      _hydrating: false, // 초기 주입 구간에서는 추적 로그 무시
    };
  },

  created() {
    this.installTransParamSpies();
  },

  methods: {
    // -------------------------------
    // 1. 추적기 설치
    // -------------------------------
    installTransParamSpies() {
      const vm = this;

      // (A) transParam 전체 교체 감지
      vm.$watch(() => vm.transParam, (next, prev) => {
        if (vm._hydrating) return;
        console.warn('[SPY][REPLACE transParam]', {
          from: JSON.parse(JSON.stringify(prev || {})),
          to:   JSON.parse(JSON.stringify(next || {}))
        });
        console.trace(); // ★ 범인 스택
      }, { deep: false });

      // (B) transParam 내부 변경 감지 (배열 push/splice, 키 수정 등)
      vm.$watch('transParam', (next, prev) => {
        if (vm._hydrating) return;
        console.warn('[SPY][MUTATE transParam]', {
          from: JSON.parse(JSON.stringify(prev || {})),
          to:   JSON.parse(JSON.stringify(next || {}))
        });
        console.trace(); // ★ 범인 스택
      }, { deep: true });
    },
  },

  mounted() {
    // -------------------------------
    // 2. cond 파라미터 간결 초기화
    // -------------------------------
    this._hydrating = true;

    try {
      const cond = this.$route.query.cond;
      const raw  = Array.isArray(cond) ? cond[0] : cond;
      this.transParam = JSON.parse(raw);   // 바로 파싱 후 세팅
    } catch (e) {
      console.error('[parse error]', e, this.$route.query.cond);
      this.transParam = {};                // 실패 시 기본값
    }

    this.$nextTick(() => {
      this._hydrating = false;
      console.log('[after hydrate]', JSON.parse(JSON.stringify(this.transParam)));
    });
  }
};