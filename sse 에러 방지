@GetMapping("/sse")
public SseEmitter streamEvent() {
    SseEmitter emitter = new SseEmitter(30 * 60 * 1000L);
    emitters.add(emitter);

    ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();

    ScheduledFuture<?> pingTask = scheduler.scheduleAtFixedRate(() -> {
        try {
            emitter.send(SseEmitter.event().name("ping").data("keep-alive"));
        } catch (IOException e) {
            emitter.completeWithError(e);
        }
    }, 90, 90, TimeUnit.SECONDS);

    Runnable cleanup = () -> {
        emitters.remove(emitter);
        pingTask.cancel(true);
        scheduler.shutdown();
    };

    emitter.onCompletion(cleanup);
    emitter.onTimeout(cleanup);
    emitter.onError(e -> cleanup.run());

    try {
        emitter.send(SseEmitter.event().name("init").data("connected"));
    } catch (IOException e) {
        emitter.completeWithError(e);
    }

    return emitter;
}





ㅡㅡㅡㅡㅡㅡ


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.scheduling.TaskScheduler;
import org.springframework.scheduling.annotation.EnableScheduling;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.mvc.method.annotation.SseEmitter;

import java.io.IOException;
import java.time.Duration;
import java.util.Set;
import java.util.concurrent.CopyOnWriteArraySet;
import java.util.concurrent.ScheduledFuture;

@RestController
@EnableScheduling
public class SseController {

    private final Set<SseEmitter> emitters = new CopyOnWriteArraySet<>();

    @Autowired
    private TaskScheduler taskScheduler;

    @GetMapping("/sse")
    public SseEmitter streamEvent() {
        SseEmitter emitter = new SseEmitter(Duration.ofMinutes(30).toMillis());
        emitters.add(emitter);

        // 1. 클라이언트에게 최초 연결 확인용 init 이벤트 전송
        try {
            emitter.send(SseEmitter.event()
                    .name("init")
                    .data("connected", MediaType.TEXT_PLAIN));
        } catch (IOException e) {
            emitter.completeWithError(e);
        }

        // 2. 주기적인 ping 이벤트 전송
        ScheduledFuture<?> pingTask = taskScheduler.scheduleAtFixedRate(() -> {
            try {
                emitter.send(SseEmitter.event()
                        .name("ping")
                        .data("keep-alive", MediaType.TEXT_PLAIN));
            } catch (IOException e) {
                emitter.completeWithError(e);
            }
        }, Duration.ofSeconds(10));

        // 3. emitter 종료 시 정리 작업
        Runnable cleanUp = () -> {
            emitters.remove(emitter);
            pingTask.cancel(true);
        };
        emitter.onCompletion(cleanUp);
        emitter.onTimeout(cleanUp);
        emitter.onError(e -> cleanUp.run());

        return emitter;
    }
}