요점

뷰의 rowData 객체를 그대로 JSON에 넣어 POST → 서버에서 RowDto rowData로 매핑 (그대로 됩니다)

버튼 URL(siteUrl)이 비어 있으면 메일 본문에서 버튼 자체를 표시하지 않음 (서비스단 private 템플릿 함수에서 처리)



---

백엔드 (Spring Boot)

1) 요청 DTO (기존 RowDto 포함)

// imports
import lombok.Data;

@Data
public class ProcessPostRequest {
    private String type;
    private String model;
    private String key;

    // 뷰에서 넘어오는 rowData 객체를 그대로 받습니다.
    private RowDto rowData;

    // 이메일 옵션
    private String emailTo;       // 수신자 (없으면 발송 스킵)
    private String siteUrl;       // 버튼 링크 (없으면 버튼 숨김)
    private String supportEmail;  // 푸터 문의 메일 (필요 시 문구에 사용)
    private String subject;       // 제목 오버라이드(없으면 "type - model 변경 알림")
}

> RowDto는 프로젝트에 이미 있는 DTO를 사용하세요. (예: appliedAt, appliedBy, simTitle, simCreatedAt, equipmentName, status, simRunAt 등)




---

2) 컨트롤러 (POST, try/catch 없음, Map 3키)

// imports
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.LinkedHashMap;
import java.util.Map;

@RestController
@RequiredArgsConstructor
@RequestMapping("/api/process")
public class ProcessController {

    private final ProcessService processService;

    @PostMapping("/run")
    public ResponseEntity<Map<String, Object>> run(@RequestBody ProcessPostRequest req) throws Exception {
        // 1) 트랜잭션 처리 (실패 시 예외 → 전역 핸들러)
        boolean ok = processService.runAtomic(req.getType(), req.getModel(), req.getKey());

        // 2) 커밋 이후 이메일 발송 (서비스에 위임: 템플릿 포함)
        boolean emailOk = processService.sendProcessEmail(req);

        // 3) 요구한 3개 키만 반환
        Map<String, Object> res = new LinkedHashMap<>();
        res.put("status", ok);
        res.put("algorithmKey", req.getKey());
        res.put("emailStatus", emailOk);

        return ResponseEntity.ok(res);
    }
}


---

3) 서비스 인터페이스

public interface ProcessService {
    /** 1~10 단계: 예외 없이 완료 시 true, 실패 시 예외 throw(→롤백) */
    boolean runAtomic(String type, String model, String key) throws Exception;

    /** 이메일 발송 (수신자 없으면 false 반환). 템플릿/치환/발송은 내부에서 처리 */
    boolean sendProcessEmail(ProcessPostRequest req) throws Exception;
}


---

4) 서비스 구현 (트랜잭션 + 이메일, 버튼 조건부 표시)

// imports
import lombok.RequiredArgsConstructor;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.mail.internet.MimeMessage;

@Service
@RequiredArgsConstructor
public class ProcessServiceImpl implements ProcessService {

    // private final WorkMapper workMapper;
    // private final RefMapper refMapper;
    // private final BackupMapper backupMapper;
    private final JavaMailSender mailSender;

    @Override
    @Transactional(readOnly = false, rollbackFor = Exception.class)
    public boolean runAtomic(String type, String model, String key) throws Exception {
        // 1~10단계 로직…
        // 중간 문제 시 예외 throw → 전체 롤백
        return true; // 정상 종료 → 커밋
    }


@Override
public Map<String, Object> sendProcessEmail(ProcessPostRequest req) {
    Map<String, Object> result = new HashMap<>();
    try {
        // ✅ 수신자 확인 (예: req.getRowData().getEmail())
        if (req.getRowData() == null || req.getRowData().getEmail() == null || req.getRowData().getEmail().isEmpty()) {
            result.put("drag", Map.of(
                "resultCode", "fail",
                "message", "수신자가 존재하지 않아 메일 발송을 중단했습니다."
            ));
            return result;
        }

        // ✅ 메일 템플릿 생성
        String html = buildEmailTemplate(req);

        // ✅ 외부 이메일 API 호출
        String response = externalEmailApiCall(html);   // ← 여기가 실제 API 호출부

        // ✅ JSON → Map 변환
        ObjectMapper mapper = new ObjectMapper();
        Map<String, Object> parsed = mapper.readValue(response, Map.class);

        result.putAll(parsed); // drag 키 그대로 유지
    } catch (Exception e) {
        // ✅ 실패 시에도 drag 키 보장
        result.put("drag", Map.of(
            "resultCode", "fail",
            "message", "메일 발송 실패 (" + e.getMessage() + ")"
        ));
    }
    return result;
}




    @Override
    public boolean sendProcessEmail(ProcessPostRequest req) throws Exception {
        // 수신자 없으면 발송 스킵
        if (req.getEmailTo() == null || req.getEmailTo().isBlank()) {
            return false;
        }

        String subject = (req.getSubject() != null && !req.getSubject().isBlank())
                ? req.getSubject()
                : req.getType() + " - " + req.getModel() + " 변경 알림";

        String html = buildEmailHtml(req); // private 템플릿 빌더 (버튼 조건부 포함)

        MimeMessage msg = mailSender.createMimeMessage();
        MimeMessageHelper helper = new MimeMessageHelper(msg, "UTF-8");
        helper.setTo(req.getEmailTo());
        helper.setSubject(subject);
        helper.setText(html, true); // HTML 모드
        mailSender.send(msg);

        return true;
    }

    /** 이메일 템플릿: siteUrl 없으면 버튼 블록을 아예 넣지 않음 */
    private String buildEmailHtml(ProcessPostRequest req) {
        RowDto r = req.getRowData();
        String appliedAt     = nv(r != null ? r.getAppliedAt()     : null);
        String appliedBy     = nv(r != null ? r.getAppliedBy()     : null);
        String simTitle      = nv(r != null ? r.getSimTitle()      : null);
        String simCreatedAt  = nv(r != null ? r.getSimCreatedAt()  : null);
        String equipmentName = nv(r != null ? r.getEquipmentName() : null);
        String status        = nv(r != null ? r.getStatus()        : null);
        String simRunAt      = nv(r != null ? r.getSimRunAt()      : null);

        String type   = safe(req.getType());
        String model  = safe(req.getModel());
        String siteUrl = nv(req.getSiteUrl());           // 없으면 ""
        String support = nv(req.getSupportEmail());      // 필요 시 문구에 사용

        String buttonBlock = siteUrl.isEmpty()
                ? "" // 버튼 숨김
                : "<p style=\"margin-top:24px;\">" +
                  "  <a href=\"" + esc(siteUrl) + "\" style=\"background:#2563eb; color:#fff; padding:10px 20px; border-radius:6px; text-decoration:none; font-size:13px; display:inline-block;\">" +
                  "    사이트로 이동" +
                  "  </a>" +
                  "</p>";

        String footer = "이 메일은 시스템에 의해 자동 발송되었습니다."
                + (support.isEmpty() ? "" : " 문의: " + esc(support));

        String tpl =
            "<div style=\"max-width:600px; font-family:sans-serif; border-radius:8px; border:1px solid #e5e7eb; overflow:hidden;\">" +
            "  <div style=\"background:#1f2937; color:#fff; padding:16px;\">" +
            "    <p style=\"margin:0 0 4px 0; font-size:13px; color:#d1d5db;\">알고리즘 변경 알림</p>" +
            "    <p style=\"font-size:18px; font-weight:bold; margin:0;\">" +
            "      " + esc(type) + " - " + esc(model) + " 이(가) 변경되었습니다." +
            "    </p>" +
            "  </div>" +
            "  <div style=\"padding:16px; background:#fff;\">" +

            "    <h3 style=\"font-size:14px; margin:0 0 8px 0; color:#111;\">적용 정보</h3>" +
            "    <table style=\"width:100%; border-collapse:separate; border-spacing:0; font-size:13px; border:1px solid #e5e7eb; border-radius:8px; overflow:hidden;\">" +
            row("Type", esc(type)) +
            row("Model", esc(model)) +
            row("적용 날짜", esc(appliedAt)) +
            row("적용자 ID", esc(appliedBy)) +
            "    </table>" +

            "    <h3 style=\"font-size:14px; margin:24px 0 8px 0; color:#111;\">적용에 사용된 내용 정보 (시뮬레이션)</h3>" +
            "    <table style=\"width:100%; border-collapse:separate; border-spacing:0; font-size:13px; border:1px solid #e5e7eb; border-radius:8px; overflow:hidden;\">" +
            row("시뮬레이션 타이틀", esc(simTitle)) +
            row("시뮬레이션 등록 날짜", esc(simCreatedAt)) +
            row("장비명", esc(equipmentName)) +
            row("상태", esc(status)) +
            row("시뮬레이션 실행 날짜", esc(simRunAt)) +
            "    </table>" +

            // 버튼: siteUrl이 있을 때만 추가
            buttonBlock +

            "    <p style=\"margin:24px 0 0 0; font-size:12px; color:#666;\">" + footer + "</p>" +
            "  </div>" +
            "</div>";

        return tpl;
    }

    // 테이블 행 헬퍼
    private static String row(String th, String td) {
        return "      <tr>" +
               "        <th style=\"background:#f9fafb; text-align:left; padding:10px; width:160px; border-bottom:1px solid #e5e7eb; border-right:1px solid #e5e7eb;\">" + th + "</th>" +
               "        <td style=\"padding:10px; border-bottom:1px solid #e5e7eb;\">" + td + "</td>" +
               "      </tr>";
    }

    private static String nv(String s)   { return s == null ? "" : s; }
    private static String safe(String s) { return s == null ? "" : s; }

    // 아주 간단한 escape (필요시 더 강한 HTML escape 유틸로 교체)
    private static String esc(String s) {
        return s.replace("&", "&amp;")
                .replace("<", "&lt;")
                .replace(">", "&gt;");
    }
}

> 포인트

siteUrl이 비어 있으면 buttonBlock이 빈 문자열 → 버튼 미표시

footer에 supportEmail 있으면 문의 메일을 함께 표기

프런트에서 rowData를 그대로 보내면 Spring이 자동으로 RowDto에 바인딩합니다.





---

프런트(Vue 2)

1) 컴포넌트 예시 (rowData 그대로 전송)

<template>
  <div>
    <form @submit.prevent="onSubmit">
      <!-- type/model/key 및 이메일 옵션 입력 UI는 생략 -->
      <button type="submit">적용 실행</button>
    </form>

    <div v-if="loading">처리 중...</div>

    <div v-if="resp">
      <p>status: {{ resp.status }}</p>
      <p>algorithmKey: {{ resp.algorithmKey }}</p>
      <p>emailStatus: {{ resp.emailStatus }}</p>
    </div>

    <div v-if="error" style="color:red;">에러: {{ error }}</div>
  </div>
</template>

<script>
// imports
import axios from 'axios';

export default {
  name: 'ProcessRunner',
  data() {
    return {
      loading: false,
      resp: null,
      error: null,

      // 뷰에서 이미 가지고 있는 rowData (테이블의 한 행)
      rowData: {
        appliedAt: '2025-08-19 10:15',
        appliedBy: 'jiwoo',
        simTitle: 'Compounded Loss v3',
        simCreatedAt: '2025-08-14 12:33',
        equipmentName: 'EQP-7G Delta',
        status: 'SUCCESS',
        simRunAt: '2025-08-15 09:00'
      },

      // 폼의 나머지 필드
      type: 'A',
      model: 'MODEL-42',
      key: 'K123',

      emailTo: 'user@example.com',
      siteUrl: 'https://app.example.com/detail?id=42', // 빈 문자열이면 버튼 숨김
      supportEmail: 'support@example.com',
      subject: '' // 비우면 기본 제목
    };
  },
  methods: {
    async onSubmit() {
      this.loading = true;
      this.error = null;
      this.resp = null;

      // rowData를 그대로 payload에 담아 전송
      const payload = {
        type: this.type,
        model: this.model,
        key: this.key,
        rowData: this.rowData,          // ← 그대로 전송

        emailTo: this.emailTo,
        siteUrl: this.siteUrl,          // '' 이면 서버에서 버튼 숨김
        supportEmail: this.supportEmail,
        subject: this.subject
      };

      try {
        const { data } = await axios.post('/api/process/run', payload, {
          headers: { 'Content-Type': 'application/json' }
        });
        this.resp = data; // { status, algorithmKey, emailStatus }
      } catch (err) {
        this.error = (err.response && err.response.data && err.response.data.message)
          ? err.response.data.message
          : err.message;
      } finally {
        this.loading = false;
      }
    }
  }
};
</script>

> 버튼 숨김은 서버 템플릿에서 siteUrl이 빈 문자열인지로 판단합니다.
프런트에서 따로 버튼 표시 여부를 계산할 필요 없습니다.




---

정리

뷰에서 rowData 객체를 그대로 전송 → 서버의 RowDto rowData로 자동 매핑 ✔️

siteUrl 비었으면 버튼 미표시 ✔️

컨트롤러 응답은 Map 3키(status, algorithmKey, emailStatus)만 ✔️

컨트롤러는 try/catch 없음 → 전역 예외 처리에 맡김 ✔️


필요하면 RowDto 실제 필드명에 맞춰 서비스 템플릿 치환부를 바로 수정해 드릴게요.





ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


public class MailTemplateBuilder {

    // HTML 줄바꿈 추가
    private static String addLine(String value) {
        return value + "\n";
    }

    // HTML 태그 없이 값만 추가 (null 방지)
    private static String addValue(String value) {
        return value == null ? "" : value;
    }

    // <tr><td> 구조의 행 추가
    private static String addRow(String label, String value) {
        return "  <tr>"
             + "<th style='background:#f9fafb; text-align:left; padding:10px; width:160px; border:1px solid #e5e7eb;'>"
             + label
             + "</th>"
             + "<td style='padding:10px; border:1px solid #e5e7eb;'>"
             + addValue(value)
             + "</td>"
             + "</tr>\n";
    }

    // 메일 본문 생성
    public static String buildMailBody(String type, String model, String appliedAt, String appliedBy,
                                       String simTitle, String simCreatedAt, String equipmentName,
                                       String status, String simRunAt, String siteUrl) {

        StringBuilder sb = new StringBuilder();

        sb.append("<div style='max-width:600px; font-family:sans-serif; border-radius:8px; border:1px solid #e5e7eb; overflow:hidden;'>\n");

        // 헤더
        sb.append("  <div style='background:#1f2937; color:#fff; padding:16px;'>\n");
        sb.append("    <p style='margin:0 0 4px 0; font-size:13px; color:#d1d5db;'>알고리즘 변경 알림</p>\n");
        sb.append("    <p style='font-size:18px; font-weight:bold; margin:0;'>")
          .append(type).append(" - ").append(model).append(" 이(가) 변경되었습니다.</p>\n");
        sb.append("  </div>\n");

        // 본문
        sb.append("  <div style='padding:16px; background:#fff;'>\n");

        // 적용 정보
        sb.append("    <h3 style='font-size:14px; margin:0 0 8px 0; color:#111;'>적용 정보</h3>\n");
        sb.append("    <table style='width:100%; border-collapse:collapse; font-size:13px; border:1px solid #e5e7eb; border-radius:8px;'>\n");
        sb.append(addRow("Type", type));
        sb.append(addRow("Model", model));
        sb.append(addRow("적용 날짜", appliedAt));
        sb.append(addRow("적용자 ID", appliedBy));
        sb.append("    </table>\n");

        // 시뮬레이션 정보
        sb.append("    <h3 style='font-size:14px; margin:24px 0 8px 0; color:#111;'>적용에 사용된 내용 정보 (시뮬레이션)</h3>\n");
        sb.append("    <table style='width:100%; border-collapse:collapse; font-size:13px; border:1px solid #e5e7eb; border-radius:8px;'>\n");
        sb.append(addRow("시뮬레이션 타이틀", simTitle));
        sb.append(addRow("시뮬레이션 등록 날짜", simCreatedAt));
        sb.append(addRow("장비명", equipmentName));
        sb.append(addRow("상태", status));
        sb.append(addRow("시뮬레이션 실행 날짜", simRunAt));
        sb.append("    </table>\n");

        // 버튼 (URL 있을 때만)
        if (siteUrl != null && !siteUrl.isEmpty()) {
            sb.append("    <p style='margin-top:24px;'>\n");
            sb.append("      <a href='").append(siteUrl).append("' ")
              .append("style='background:#2563eb; color:#fff; padding:10px 20px; border-radius:6px; text-decoration:none; font-size:13px; display:inline-block;'>")
              .append("사이트로 이동</a>\n");
            sb.append("    </p>\n");
        }

        // 안내 문구
        sb.append("    <p style='margin:24px 0 0 0; font-size:12px; color:#666;'>\n");
        sb.append("      이 메일은 시스템에 의해 자동 발송되었습니다.\n");
        sb.append("    </p>\n");

        sb.append("  </div>\n");
        sb.append("</div>\n");

        return sb.toString();
    }
}





ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
그리드 라운드 처리


public class MailTemplateBuilder {

    private static String addValue(String value) {
        return value == null ? "" : value;
    }

    // 행 추가: 마지막 행 여부로 스타일 분기
    private static String addRow(String label, String value, boolean isLastRow) {
        // 공통 스타일
        String thBase = "background:#f9fafb; text-align:left; padding:10px; width:160px; border-right:1px solid #e5e7eb;";
        String tdBase = "padding:10px;";

        // 마지막 행이 아니면 아래 구분선 추가
        if (!isLastRow) {
            thBase += " border-bottom:1px solid #e5e7eb;";
            tdBase += " border-bottom:1px solid #e5e7eb;";
        }

        return "  <tr>"
             + "<th style='" + thBase + "'>" + label + "</th>"
             + "<td style='" + tdBase + "'>" + addValue(value) + "</td>"
             + "</tr>\n";
    }

    // 오버로드(기존 호출부와 호환): 기본적으로 마지막 행 아님
    private static String addRow(String label, String value) {
        return addRow(label, value, false);
    }

    // 메일 본문 생성
    public static String buildMailBody(String type, String model, String appliedAt, String appliedBy,
                                       String simTitle, String simCreatedAt, String equipmentName,
                                       String status, String simRunAt, String siteUrl) {

        StringBuilder sb = new StringBuilder();

        sb.append("<div style='max-width:600px; font-family:sans-serif; border-radius:8px; border:1px solid #e5e7eb; overflow:hidden;'>\n");

        // 헤더
        sb.append("  <div style='background:#1f2937; color:#fff; padding:16px;'>\n");
        sb.append("    <p style='margin:0 0 4px 0; font-size:13px; color:#d1d5db;'>알고리즘 변경 알림</p>\n");
        sb.append("    <p style='font-size:18px; font-weight:bold; margin:0;'>")
          .append(type).append(" - ").append(model).append(" 이(가) 변경되었습니다.</p>\n");
        sb.append("  </div>\n");

        // 본문
        sb.append("  <div style='padding:16px; background:#fff;'>\n");

        // 적용 정보
        sb.append("    <h3 style='font-size:14px; margin:0 0 8px 0; color:#111;'>적용 정보</h3>\n");
        // ✅ 라운드/테두리는 div가 담당, table은 구분선만
        sb.append("    <div style='border:1px solid #e5e7eb; border-radius:8px; overflow:hidden; display:block;'>\n");
        sb.append("      <table style='width:100%; border-collapse:collapse; font-size:13px;'>\n");
        sb.append(addRow("Type", type, false));
        sb.append(addRow("Model", model, false));
        sb.append(addRow("적용 날짜", appliedAt, false));
        sb.append(addRow("적용자 ID", appliedBy, true)); // 마지막 행
        sb.append("      </table>\n");
        sb.append("    </div>\n");

        // 시뮬레이션 정보
        sb.append("    <h3 style='font-size:14px; margin:24px 0 8px 0; color:#111;'>적용에 사용된 내용 정보 (시뮬레이션)</h3>\n");
        sb.append("    <div style='border:1px solid #e5e7eb; border-radius:8px; overflow:hidden; display:block;'>\n");
        sb.append("      <table style='width:100%; border-collapse:collapse; font-size:13px;'>\n");
        sb.append(addRow("시뮬레이션 타이틀", simTitle, false));
        sb.append(addRow("시뮬레이션 등록 날짜", simCreatedAt, false));
        sb.append(addRow("장비명", equipmentName, false));
        sb.append(addRow("상태", status, false));
        sb.append(addRow("시뮬레이션 실행 날짜", simRunAt, true)); // 마지막 행
        sb.append("      </table>\n");
        sb.append("    </div>\n");

        // 버튼 (URL 있을 때만)
        if (siteUrl != null && !siteUrl.isEmpty()) {
            sb.append("    <p style='margin-top:24px;'>\n");
            sb.append("      <a href='").append(siteUrl).append("' ")
              .append("style='background:#2563eb; color:#fff; padding:10px 20px; border-radius:6px; text-decoration:none; font-size:13px; display:inline-block;'>")
              .append("사이트로 이동</a>\n");
            sb.append("    </p>\n");
        }

        // 안내 문구
        sb.append("    <p style='margin:24px 0 0 0; font-size:12px; color:#666;'>\n");
        sb.append("      이 메일은 시스템에 의해 자동 발송되었습니다.\n");
        sb.append("    </p>\n");

        sb.append("  </div>\n");
        sb.append("</div>\n");

        return sb.toString();
    }
}



ㅡㅡㅡㅡㅡㅡㅡㅡ
테스트코드

// src/test/java/your/pkg/controller/ProcessControllerTest.java
package your.pkg.controller;

import your.pkg.service.ProcessService;
import your.pkg.dto.ProcessPostRequest;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.HashMap;
import java.util.Map;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(controllers = ProcessController.class)
class ProcessControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private ProcessService processService; // 실제 구현 대신 목 주입

    @Autowired
    private ObjectMapper objectMapper;

    @Test
    @DisplayName("/api/process/run 정상 플로우: 트랜잭션 성공 + 이메일 결과 포함")
    void run_ok() throws Exception {
        // given: 서비스 동작을 목으로 정의
        when(processService.runAtomic("A", "MODEL-42", "K123")).thenReturn(true);

        Map<String, Object> drag = new HashMap<>();
        drag.put("resultCode", "success");
        drag.put("message", "메일 발송 성공");

        Map<String, Object> emailResult = new HashMap<>();
        emailResult.put("drag", drag);

        when(processService.sendProcessEmail(any(ProcessPostRequest.class)))
                .thenReturn(emailResult);

        // 요청 페이로드
        Map<String, Object> body = new HashMap<>();
        body.put("type", "A");
        body.put("model", "MODEL-42");
        body.put("key", "K123");
        body.put("emailTo", "user@example.com");
        body.put("siteUrl", "https://app.example.com/detail?id=42");
        body.put("supportEmail", "support@example.com");

        Map<String, Object> rowData = new HashMap<>();
        rowData.put("appliedAt", "2025-08-19 10:15");
        rowData.put("appliedBy", "jiwoo");
        rowData.put("simTitle", "Compounded Loss v3");
        rowData.put("simCreatedAt", "2025-08-14 12:33");
        rowData.put("equipmentName", "EQP-7G Delta");
        rowData.put("status", "SUCCESS");
        rowData.put("simRunAt", "2025-08-15 09:00");
        body.put("rowData", rowData);

        // when + then
        mockMvc.perform(post("/api/process/run")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(body)))
               .andExpect(status().isOk())
               .andExpect(jsonPath("$.status").value(true))
               .andExpect(jsonPath("$.algorithmKey").value("K123"))
               .andExpect(jsonPath("$.drag.resultCode").value("success"))
               .andExpect(jsonPath("$.drag.message").value("메일 발송 성공"));

        // (선택) 호출 검증
        Mockito.verify(processService).runAtomic("A", "MODEL-42", "K123");
        Mockito.verify(processService).sendProcessEmail(any(ProcessPostRequest.class));
    }

    @Test
    @DisplayName("/api/process/run 실패 플로우: 트랜잭션 예외 → 전역 핸들러 동작 여부는 정책에 맞게")
    void run_fail_transaction() throws Exception {
        // 트랜잭션 예외 시뮬레이션
        when(processService.runAtomic("A", "MODEL-42", "K123"))
                .thenThrow(new IllegalStateException("검증 실패"));

        Map<String, Object> body = new HashMap<>();
        body.put("type", "A");
        body.put("model", "MODEL-42");
        body.put("key", "K123");
        body.put("rowData", new HashMap<>());

        mockMvc.perform(post("/api/process/run")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(body)))
               // 전역 예외 핸들러 정책에 따라 200 or 500 등으로 조정
               .andExpect(status().is5xxServerError());
    }
}