import { ValidationMessages } from './validationMessages';

export function validateSomething(values) {
  if (!values.something) {
    return {
      isValid: false,
      message: ValidationMessages.REQUIRED
    };
  }
  return { isValid: true, message: '' };
}

export function validateAnotherThing(values) {
  if (values.anotherThing && values.anotherThing.length < 5) {
    return {
      isValid: false,
      message: ValidationMessages.MIN_LENGTH(5)
    };
  }
  return { isValid: true, message: '' };
}

export function validateAllFields(values) {
  const errors = {};
  
  const somethingValidation = validateSomething(values);
  if (!somethingValidation.isValid) {
    errors.something = somethingValidation.message;
  }

  const anotherThingValidation = validateAnotherThing(values);
  if (!anotherThingValidation.isValid) {
    errors.anotherThing = anotherThingValidation.message;
  }

  return {
    isValid: Object.keys(errors).length === 0,
    errors
  };
}




ㅡㅡㅡㅡㅡㅡㅡㅡㅡ

import { ValidationMessages } from './validationMessages';

class Validators {
  constructor(logicValues) {
    this.values = logicValues;
  }

  validateBranchCondition() {
    // 브랜치 노드의 condition 검증 로직
    const emptyConditionNodes = []; // 실제 로직에서는 비어있는 노드 ID를 여기에 추가
    if (emptyConditionNodes.length === 0) {
      return { isValid: true, message: ValidationMessages.BRANCH_CONDITION_VALID };
    }
    return {
      isValid: false,
      message: ValidationMessages.BRANCH_CONDITION_INVALID.replace('{0}', emptyConditionNodes.join(', '))
    };
  }

  validateSingleTree() {
    // 싱글트리 검증 로직
    const rootNodes = []; // 실제 로직에서는 루트 노드를 찾아 여기에 추가
    if (rootNodes.length === 1) {
      return { isValid: true, message: ValidationMessages.SINGLE_TREE_VALID };
    }
    if (rootNodes.length === 0) {
      return { isValid: false, message: ValidationMessages.SINGLE_TREE_NO_ROOT };
    }
    return {
      isValid: false,
      message: ValidationMessages.SINGLE_TREE_MULTIPLE_ROOTS.replace('{0}', rootNodes.slice(1).join(', '))
    };
  }

  validateNodeChildren() {
    // 노드 타입별 자식 노드 개수 검증 로직
    const invalidNodes = []; // 실제 로직에서는 조건에 맞지 않는 노드 ID를 여기에 추가
    if (invalidNodes.length === 0) {
      return { isValid: true, message: ValidationMessages.NODE_CHILDREN_VALID };
    }
    return {
      isValid: false,
      message: ValidationMessages.NODE_CHILDREN_INVALID.replace('{0}', invalidNodes.join(', '))
    };
  }

  validateLeafNodes() {
    // 노드 끝이 leaf 타입인지 검증 로직
    const nonLeafEndNodes = []; // 실제 로직에서는 leaf 타입이 아닌 끝 노드 ID를 여기에 추가
    if (nonLeafEndNodes.length === 0) {
      return { isValid: true, message: ValidationMessages.LEAF_NODES_VALID };
    }
    return {
      isValid: false,
      message: ValidationMessages.LEAF_NODES_INVALID.replace('{0}', nonLeafEndNodes.join(', '))
    };
  }

  validateAll() {
    const results = {
      branchCondition: this.validateBranchCondition(),
      singleTree: this.validateSingleTree(),
      nodeChildren: this.validateNodeChildren(),
      leafNodes: this.validateLeafNodes()
    };

    const isValid = Object.values(results).every(result => result.isValid);
    const errors = Object.entries(results)
      .filter(([_, result]) => !result.isValid)
      .reduce((acc, [key, result]) => {
        acc[key] = result.message;
        return acc;
      }, {});

    return { isValid, errors };
  }
}

export default Validators;





ㅡㅡㅡㅡ


validateAll() {
  const results = {
    branchCondition: this.validateBranchCondition(),
    singleTree: this.validateSingleTree(),
    nodeChildren: this.validateNodeChildren(),
    leafNodes: this.validateLeafNodes()
  };

  const isValid = Object.values(results).every(result => result.isValid);
  const errors = {};

  if (!isValid) {
    Object.entries(results).forEach(([key, result]) => {
      if (!result.isValid) {
        errors[key] = result.message;
      }
    });
  }

  return { isValid, errors };
}




ㅡㅡㅡㅡㅡㅡ



validateRequiredFields() {
  const missingFields = {};

  this.logicValues.forEach(node => {
    const nodeType = node.type;
    const requiredFields = REQUIRED_FIELDS[nodeType];

    if (!requiredFields) {
      missingFields[node.id] = [`Unknown node type: ${nodeType}`];
      return;
    }

    const missingForNode = requiredFields.filter(field => 
      node[field] === undefined || node[field] === null || node[field] === ''
    );

    if (missingForNode.length > 0) {
      missingFields[node.id] = missingForNode;
    }
  });

  if (Object.keys(missingFields).length === 0) {
    return { isValid: true, message: ValidationMessages.REQUIRED_FIELDS_VALID };
  }

  const missingFieldsStr = Object.entries(missingFields)
    .map(([id, fields]) => `${id}: ${fields.join(', ')}`)
    .join('; ');

  return {
    isValid: false,
    message: ValidationMessages.REQUIRED_FIELDS_INVALID.replace('{0}', missingFieldsStr)
  };
}
