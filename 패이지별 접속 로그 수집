좋아요, **afterEach 추가 + 백엔드 수집(디비 없이 로그만 남김)**으로 바로 붙여 쓸 수 있게 최소구성 예시를 드릴게요.
(모든 코드에 import 포함했습니다.)
1) 프론트(Vue2) — router.afterEach에서 전송
router.js
코드 복사
Js
// imports
import Vue from 'vue';
import VueRouter from 'vue-router';
import routes from './routes'; // 라우트 정의부

Vue.use(VueRouter);

const router = new VueRouter({
  mode: 'history', // 프로젝트 설정에 맞게
  routes,
  scrollBehavior(to, from, saved) {
    return saved || { x: 0, y: 0 };
  },
});

// ---- (기존) 인증/권한 체크 등 beforeEach 유지 가능 ----
router.beforeEach((to, from, next) => {
  // 예) if (!isAuthed && to.meta.requiresAuth) return next('/login');
  next();
});

// ---- 추적 전송 유틸(의존성 없음) ----
function postBeacon(url, data) {
  try {
    const body = JSON.stringify(data);
    const blob = new Blob([body], { type: 'application/json' });

    // 1) sendBeacon 우선
    if (navigator.sendBeacon && navigator.sendBeacon(url, blob)) return;

    // 2) 폴백: keepalive fetch
    fetch(url, {
      method: 'POST',
      body,
      headers: { 'Content-Type': 'application/json' },
      keepalive: true,
      credentials: 'include', // 세션 쿠키 사용한다면 유지
    }).catch(() => {});
  } catch (_) { /* 로깅 실패는 무시 */ }
}

// ---- "성공적으로 내비게이션 완료된 뒤" 1회 전송 ----
router.afterEach((to, from) => {
  // 특정 페이지만 카운트하려면: if (!to.meta?.track) return;

  const payload = {
    path: to.path,
    name: to.name || null,
    referrerPath: from && from.path ? from.path : null,
    tsClient: new Date().toISOString(),
    appVersion: process.env.VUE_APP_VERSION || null,
    userId: window.__USER_ID__ || null,     // 내부 식별자만 (PII 최소화)
    sessionId: window.__SESSION_ID__ || null,
    locale: navigator.language || null,
  };

  postBeacon('/api/track/pageview', payload);
});

export default router;
포인트: afterEach는 라우팅이 “실제 완료된 뒤”만 실행되므로 카운트 정확도가 높습니다.



지금처럼 auth, common만 있다면 추적 전용 패키지/모듈을 따로 파는 게 제일 깔끔합니다.
common에 우겨넣으면 “공통”이 점점 비대해지고 경계가 흐려져요. 이벤트/로그는 별 경계로 두는 게 나중에 DB 도입·큐 연동할 때도 편합니다.
추천 구조 (패키지 & 파일 위치)
코드 복사

com.example.app
 ├─ auth
 ├─ common
 └─ tracking                 // ★ 새로 생성 (또는 analytics)
     ├─ dto
     │   └─ PageViewDto.java
     ├─ web
     │   └─ TrackingController.java
     ├─ service
     │   └─ TrackingService.java         // 지금은 로그만 남기지만 확장 대비
     ├─ mapper                           // MyBatis 도입 시
     │   ├─ PageViewMapper.java
     │   └─ PageViewMapper.xml           // resources/mappers/PageViewMapper.xml
     └─ config
         └─ TrackingSecurityConfig.java  // (선택) /api/track/** permitAll & CSRF 예외
엔드포인트 경로: /api/track/pageview (tracking 전용 prefix 유지)
보안: Spring Security 사용 시 /api/track/**는 permitAll + csrf().ignoringAntMatchers(...) 권장
로그 라우팅: logback-spring.xml에서 logger name="TRACKING_LOG"로 분리(선택)
코드 스켈레톤
DTO
코드 복사
Java
package com.example.app.tracking.dto;

import lombok.Data;

@Data
public class PageViewDto {
    private String path;
    private String name;
    private String referrerPath;
    private String tsClient;
    private String appVersion;
    private String userId;
    private String sessionId;
    private String locale;

    // 서버 보강
    private String userAgent;
    private String clientIp;
    private String tsServer;
}
Controller (로그만 기록)
코드 복사
Java
package com.example.app.tracking.web;

import com.example.app.tracking.dto.PageViewDto;
import com.example.app.tracking.service.TrackingService;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import java.time.OffsetDateTime;

@RestController
@RequestMapping("/api/track")
public class TrackingController {

    private final TrackingService trackingService;

    public TrackingController(TrackingService trackingService) {
        this.trackingService = trackingService;
    }

    @PostMapping("/pageview")
    @ResponseStatus(HttpStatus.ACCEPTED)
    public void pageview(@RequestBody PageViewDto dto, HttpServletRequest req) {
        dto.setUserAgent(req.getHeader("User-Agent"));
        dto.setClientIp(resolveClientIp(req));
        dto.setTsServer(OffsetDateTime.now().toString());
        trackingService.logPageView(dto); // 지금은 파일/콘솔 로그
    }

    private String resolveClientIp(HttpServletRequest req) {
        String xff = req.getHeader("X-Forwarded-For");
        if (xff != null && !xff.isEmpty()) return xff.split(",")[0].trim();
        return req.getRemoteAddr();
    }
}
Service (지금은 로그, 나중엔 DB/큐로 교체)
코드 복사
Java
package com.example.app.tracking.service;

import com.example.app.tracking.dto.PageViewDto;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

@Service
public class TrackingService {
    private static final Logger log = LoggerFactory.getLogger("TRACKING_LOG");

    public void logPageView(PageViewDto d) {
        // 한 줄 JSON (간단 직렬화)
        log.info(
          "{\"path\":\"{}\",\"name\":\"{}\",\"referrerPath\":\"{}\",\"tsClient\":\"{}\"," +
          "\"appVersion\":\"{}\",\"userId\":\"{}\",\"sessionId\":\"{}\",\"locale\":\"{}\"," +
          "\"userAgent\":\"{}\",\"clientIp\":\"{}\",\"tsServer\":\"{}\"}",
          safe(d.getPath()), safe(d.getName()), safe(d.getReferrerPath()), safe(d.getTsClient()),
          safe(d.getAppVersion()), safe(d.getUserId()), safe(d.getSessionId()), safe(d.getLocale()),
          safe(d.getUserAgent()), safe(d.getClientIp()), safe(d.getTsServer())
        );
    }

    private String safe(String s) {
        if (s == null) return "";
        return s.replace("\\", "\\\\").replace("\"", "\\\"").replace("\n"," ").replace("\r"," ");
    }
}
(선택) Security 설정
코드 복사
Java
package com.example.app.tracking.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

@Configuration
@SuppressWarnings("deprecation")
public class TrackingSecurityConfig extends WebSecurityConfigurerAdapter {
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
          .csrf().ignoringAntMatchers("/api/track/**").and()
          .authorizeRequests()
            .antMatchers("/api/track/**").permitAll()
            .anyRequest().authenticated();
    }
}
(선택) logback 분리
src/main/resources/logback-spring.xml
코드 복사
Xml
<configuration>
  <appender name="TRACKING_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>logs/tracking.log</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
      <fileNamePattern>logs/tracking.%d{yyyy-MM-dd}.log.gz</fileNamePattern>
      <maxHistory>14</maxHistory>
    </rollingPolicy>
    <encoder><pattern>%msg%n</pattern></encoder>
  </appender>

  <logger name="TRACKING_LOG" level="INFO" additivity="false">
    <appender-ref ref="TRACKING_FILE"/>
  </logger>
</configuration>
왜 별도 tracking 패키지가 좋은가?
경계 명확: auth(인증), common(유틸)와 독립 → 의존 역전/스파게티 방지
확장 용이: 나중에 MyBatis 매퍼·배치·큐(Kafka/Rabbit) 붙일 때도 같은 경로에 자연스럽게 확장
운영 편의: 로그/설정/보안 정책을 모듈 단위로 분리 가능
원하면 tracking 대신 analytics나 metrics 네이밍도 좋아요.
컨벤션만 정해주시면 거기에 맞춰 파일 경로/패키지명 바꿔 드릴게요. 




package com.example.app.tracking.service;

import com.example.app.tracking.dto.PageViewDto;
import org.springframework.stereotype.Service;

@Service
public class TrackingService {

    public void logPageView(PageViewDto d) {
        // 한 줄 JSON 문자열 출력
        System.out.println(
          String.format(
            "{\"path\":\"%s\",\"name\":\"%s\",\"referrerPath\":\"%s\",\"tsClient\":\"%s\"," +
            "\"appVersion\":\"%s\",\"userId\":\"%s\",\"sessionId\":\"%s\",\"locale\":\"%s\"," +
            "\"userAgent\":\"%s\",\"clientIp\":\"%s\",\"tsServer\":\"%s\"}",
            safe(d.getPath()), safe(d.getName()), safe(d.getReferrerPath()), safe(d.getTsClient()),
            safe(d.getAppVersion()), safe(d.getUserId()), safe(d.getSessionId()), safe(d.getLocale()),
            safe(d.getUserAgent()), safe(d.getClientIp()), safe(d.getTsServer())
          )
        );
    }

    private String safe(String s) {
        if (s == null) return "";
        return s.replace("\\", "\\\\")
                .replace("\"", "\\\"")
                .replace("\n", " ")
                .replace("\r", " ");
    }
}