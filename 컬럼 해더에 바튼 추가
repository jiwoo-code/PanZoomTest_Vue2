function MyHeader() {}

MyHeader.prototype.init = function (params) {
  this.params = params;

  // 전체 wrapper
  const eGui = document.createElement('div');
  eGui.className = 'ag-header-cell-label';
  eGui.style.display = 'flex';
  eGui.style.alignItems = 'center';
  eGui.style.justifyContent = 'space-between';
  eGui.style.width = '100%';

  // 왼쪽: ! 아이콘 버튼
  const infoButton = document.createElement('button');
  infoButton.innerText = '❗';
  infoButton.className = 'my-header-info-btn';
  infoButton.style.marginRight = '4px';
  infoButton.style.background = 'none';
  infoButton.style.border = 'none';
  infoButton.style.cursor = 'pointer';
  infoButton.addEventListener('click', (e) => {
    e.stopPropagation(); // 정렬 방지
    alert(`이미지 팝업 예정: ${params.column.getColDef().field}`);
  });

  // 컬럼명
  const label = document.createElement('span');
  label.className = 'ag-header-cell-text';
  label.innerText = params.column.getColDef().headerName || params.column.getColDef().field;

  // 오른쪽: ag-Grid 내부 정렬/필터 아이콘 (자동으로 작동)
  const sortOrderIcon = document.createElement('span');
  sortOrderIcon.className = 'ag-header-icon ag-sort-order';

  const sortAscIcon = document.createElement('span');
  sortAscIcon.className = 'ag-header-icon ag-sort-ascending-icon';

  const sortDescIcon = document.createElement('span');
  sortDescIcon.className = 'ag-header-icon ag-sort-descending-icon';

  const menuIcon = document.createElement('span');
  menuIcon.className = 'ag-header-icon ag-header-cell-menu-button';
  menuIcon.addEventListener('click', (e) => {
    e.stopPropagation(); // 정렬 방지
    params.showColumnMenu(menuIcon);
  });

  // 내부 컨테이너 구성
  const leftPart = document.createElement('div');
  leftPart.style.display = 'flex';
  leftPart.style.alignItems = 'center';
  leftPart.appendChild(infoButton);
  leftPart.appendChild(label);

  const rightPart = document.createElement('div');
  rightPart.style.display = 'flex';
  rightPart.style.alignItems = 'center';
  rightPart.style.gap = '4px';
  rightPart.appendChild(sortOrderIcon);
  rightPart.appendChild(sortAscIcon);
  rightPart.appendChild(sortDescIcon);
  rightPart.appendChild(menuIcon);

  // 전체 조립
  eGui.appendChild(leftPart);
  eGui.appendChild(rightPart);

  this.eGui = eGui;
};

MyHeader.prototype.getGui = function () {
  return this.eGui;
};



.my-custom-header-wrapper {
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  height: 100%;
  /* background-color: white; ← 제거 */
  padding: 0 4px;
  box-sizing: border-box;
  font-size: inherit;
  color: inherit;
}

.my-header-button {
  background: none;
  border: none;
  cursor: pointer;
  padding: 2px;
  font-size: inherit;
  color: inherit;
}








<!-- MyHeader.vue -->
<template>
  <div class="ag-header-cell-label custom-header" @click="onHeaderClick">
    <!-- 왼쪽 버튼 -->
    <button class="info-button" @click.stop="onInfoClick">❗</button>

    <!-- 컬럼명 -->
    <span class="ag-header-cell-text">{{ displayName }}</span>

    <!-- 오른쪽: 정렬/필터 아이콘 -->
    <span class="ag-header-icon ag-sort-order"></span>
    <span class="ag-header-icon ag-sort-ascending-icon"></span>
    <span class="ag-header-icon ag-sort-descending-icon"></span>
    <span
      class="ag-header-icon ag-header-cell-menu-button"
      @click.stop="showMenu"
    ></span>
  </div>
</template>

<script>
export default {
  props: ['params'],
  computed: {
    displayName() {
      return this.params.column.getColDef().headerName || this.params.column.getColDef().field;
    }
  },
  methods: {
    onInfoClick() {
      alert(`이미지 표시 예정: ${this.params.column.getColDef().field}`);
    },
    onHeaderClick() {
      if (this.params.enableSorting) {
        this.params.progressSort(); // 정렬 동작 트리거
      }
    },
    showMenu(event) {
      this.params.showColumnMenu(event.currentTarget);
    }
  }
};
</script>

<style scoped>
.custom-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  height: 100%;
  cursor: pointer;
}

.info-button {
  margin-right: 4px;
  background: none;
  border: none;
  cursor: pointer;
  font-size: inherit;
  color: inherit;
}
</style>


columnDefs: [
  {
    field: 'status',
    headerName: '상태',
    headerComponentFramework: MyHeader, // ✅ Vue 컴포넌트로 설정
    sortable: true,
    filter: true
  }
]