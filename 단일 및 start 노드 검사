const START_NODE_INVALID_MESSAGE = "The start node does not satisfy the following conditions";

function validateAndFindRootNode(nodes) {
  const rootConditions = {
    nodeId: node => node.nodeId === 1,
    nextNodes: node => node.nextYesNodeId && !node.nextNoNodeId,
    category: node => node.nodeCategory === 'start',
    condition: node => node.nodeCondition === 'True',
    noParent: node => !nodes.some(n => n.nextYesNodeId === node.nodeId || n.nextNoNodeId === node.nodeId)
  };

  const conditionDescriptions = {
    nodeId: "Node ID must be 1", // 노드 ID는 1이어야 합니다
    nextNodes: "Must only have a True branch", // True 분기만 있어야 합니다
    category: "Node category must be 'start'", // 노드 카테고리는 'start'여야 합니다
    condition: "Node condition must be 'True'", // 노드 조건은 'True'여야 합니다
    noParent: "Must not have a parent node" // 부모 노드가 없어야 합니다
  };

  const potentialRootNode = nodes.find(node => node.nodeId === 1);

  if (!potentialRootNode) {
    return {
      isValid: false,
      message: {
        en: "The root node is missing.",
        ko: "루트 노드가 없습니다."
      }
    };
  }

  const rootNode = Object.values(rootConditions).every(condition => condition(potentialRootNode))
    ? potentialRootNode
    : null;

  if (!rootNode) {
    const failedConditions = Object.entries(rootConditions)
      .filter(([_, condition]) => !condition(potentialRootNode))
      .map(([key]) => conditionDescriptions[key]);

    return {
      isValid: false,
      message: {
        en: `${START_NODE_INVALID_MESSAGE}: ${failedConditions.join('; ')}.`,
        ko: `start 노드의 조건을 만족하지 않습니다: ${failedConditions.join('; ')}.`
      }
    };
  }

  const nodesWithoutParent = nodes.filter(node => 
    node !== rootNode && rootConditions.noParent(node)
  );

  return { isValid: true, rootNode, nodesWithoutParent };
}
