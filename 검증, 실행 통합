“검증 → (확인팝업) → 실행”을 한 함수로 래핑해서

어느 컴포넌트든 한 줄로 호출할 수 있게 만드는 구체적 설계


---

1  applyService.js — runApplyFlow 헬퍼 함수 추가

// src/api/applyService.js
import api from '@/plugins/axios';

/* 개별 API ------------------------------ */
export const validate = (eqpId) =>
  api.get('/apply/validate', { params:{ eqpId } }).then(r => r.data);

export const execute  = (eqpId) =>
  api.post('/apply/execute',  { eqpId }).then(r => r.data);

/* 💡 NEW ─ 검증+팝업+실행 전체 수행 ------------------------ */
/**
 * @param {string}   eqpId
 * @param {Function} confirmFn   (message:string) => Promise<boolean>
 * @returns {Promise<{ ok:boolean, msg:string }>}
 */
export async function runApplyFlow(eqpId, confirmFn) {
  /* 1) 검증 */
  const v = await validate(eqpId);
  if (!v.ok) return { ok:false, msg:v.msg };

  /* 2) 확인 창 */
  const approved = await confirmFn('Apply를 실행하시겠습니까?');
  if (!approved)  return { ok:false, msg:'사용자 취소' };

  /* 3) 실제 실행 */
  const ex = await execute(eqpId);
  return { ok:true, msg: ex.status || 'SUCCESS' };
}

> confirmFn 을 매개변수로 받아 팝업 UI 에 의존하지 않습니다.

추후 테스트 시 confirmFn 자리에 () => Promise.resolve(true) 를 넘기면 자동 승인 mock 가능.





---

2  PageMain.vue — 확인창($confirm)만 Provide (변경 없음)

provide() {
  return { $confirm: this.openConfirm };   // 그대로
}


---

3  하위 컴포넌트에서 1줄 호출

<script>
import { runApplyFlow } from '@/api/applyService';

export default {
  inject: ['$confirm'],
  props : { eqpId: String },

  methods: {
    async onClickApply() {
      const { ok, msg } = await runApplyFlow(this.eqpId, this.$confirm);

      if (!ok) {
        this.$toast.error(msg);
        return;
      }
      this.$toast.success('Apply 완료!');
    }
  }
};
</script>

중복된 검증+팝업+실행 로직을 서비스 계층으로 이동 → 뷰 파일들이 깔끔해집니다.

확인창 구현을 바꾸더라도 컴포넌트 쪽은 수정할 필요가 없습니다(함수 주입).



---

장점 요약

장점	설명

한 곳에만 로직 유지	검증·팝업·실행 시나리오 변경 시 applyService.js 한 파일만 수정
의존 최소	UI(팝업)는 함수 인젝션으로 decouple → 테스트·모킹 쉬움
재사용 간단	하위 컴포넌트는 await runApplyFlow(eqpId, this.$confirm) 단 한 줄


프로젝트 전반에서 “Apply” 플로우가 반복된다면,
이처럼 서비스 계층에 래핑 함수를 두고 UI 함수(confirmFn)만 주입하는 구조가 가장 유지보수에 유리합니다.

