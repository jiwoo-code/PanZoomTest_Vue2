
WITH base AS (
  SELECT
    dt::date AS d,
    eqp_id,
    name,
    sec::numeric AS sec_num,
    split_part(name, '_', 1) AS name_core  -- Ïòà: Monday_ddd ‚Üí Monday
  FROM metrics
),
norm AS (
  SELECT
    d,
    eqp_id,
    sec_num,
    CASE
      WHEN name_core IN ('Daily', 'Weekly') THEN name_core
      WHEN name_core IN ('Monday','Tuesday','Wednesday','Thursday',
                         'Friday','Saturday','Sunday') THEN 'Weekday'
    END AS kind,
    CASE
      WHEN name_core IN ('Monday','Tuesday','Wednesday','Thursday',
                         'Friday','Saturday','Sunday') THEN name_core
    END AS weekday_label
  FROM base
),
agg AS (
  SELECT
    d,
    eqp_id,
    COUNT(*) AS total_cnt,
    COALESCE(SUM(sec_num), 0) AS total_sec,

    COUNT(*) FILTER (WHERE kind = 'Daily') AS daily_cnt,
    COALESCE(SUM(sec_num) FILTER (WHERE kind = 'Daily'), 0) AS daily_sec,

    COUNT(*) FILTER (WHERE kind = 'Weekday') AS day_cnt,
    COALESCE(SUM(sec_num) FILTER (WHERE kind = 'Weekday'), 0) AS day_sec,

    COUNT(*) FILTER (WHERE kind = 'Weekly') AS weekly_cnt,
    COALESCE(SUM(sec_num) FILTER (WHERE kind = 'Weekly'), 0) AS weekly_sec,

    MAX(weekday_label) FILTER (WHERE kind = 'Weekday') AS d_of_w
  FROM norm
  GROUP BY d, eqp_id
)
SELECT
  a.d AS "date",
  a.d_of_w AS "d-of-w",
  a.daily_cnt AS "daily cnt",
  ROUND(a.daily_sec, 3) AS "daily sec",
  a.day_cnt AS "day cnt",
  ROUND(a.day_sec, 3) AS "day sec",
  a.weekly_cnt AS "weekly cnt",
  ROUND(a.weekly_sec, 3) AS "weekly sec",
  a.total_cnt AS "total cnt",
  ROUND(a.total_sec, 3) AS "total sec"
FROM agg a
ORDER BY a.d, a.eqp_id;








üß© 1) MyBatis Mapper XML (metrics-mapper.xml)
ÏΩîÎìú Î≥µÏÇ¨
Xml
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.metrics.MetricsMapper">

    <resultMap id="RowEntityMap" type="com.example.metrics.dto.RowEntity">
        <result column="date"         property="date"/>
        <result column="d_of_w"       property="dOfW"/>
        <result column="eqp_id"       property="eqpId"/>

        <result column="daily_cnt"    property="dailyCnt"/>
        <result column="daily_sec"    property="dailySec"/>

        <result column="day_cnt"      property="dayCnt"/>
        <result column="day_sec"      property="daySec"/>

        <result column="weekly_cnt"   property="weeklyCnt"/>
        <result column="weekly_sec"   property="weeklySec"/>

        <result column="total_cnt"    property="totalCnt"/>
        <result column="total_sec"    property="totalSec"/>
    </resultMap>

    <select id="selectMetricsRows" resultMap="RowEntityMap">
        WITH base AS (
            SELECT
                dt::date AS d,
                eqp_id,
                name,
                sec::numeric AS sec_num,
                split_part(name, '_', 1) AS name_core
            FROM metric
            WHERE dt BETWEEN #{startDate} AND #{endDate}
            <if test="eqpIds != null and eqpIds.size() > 0">
                AND eqp_id IN
                <foreach collection="eqpIds" item="id" open="(" separator="," close=")">
                    #{id}
                </foreach>
            </if>
        ),
        norm AS (
            SELECT
                d,
                eqp_id,
                sec_num,
                CASE
                    WHEN name_core IN ('Daily', 'Weekly') THEN name_core
                    WHEN name_core IN ('Monday','Tuesday','Wednesday','Thursday',
                                       'Friday','Saturday','Sunday') THEN 'Weekday'
                END AS kind,
                CASE
                    WHEN name_core IN ('Monday','Tuesday','Wednesday','Thursday',
                                       'Friday','Saturday','Sunday') THEN name_core
                END AS weekday_label
            FROM base
        ),
        agg AS (
            SELECT
                d,
                eqp_id,
                COUNT(*) AS total_cnt,
                COALESCE(SUM(sec_num), 0) AS total_sec,

                COUNT(*) FILTER (WHERE kind = 'Daily') AS daily_cnt,
                COALESCE(SUM(sec_num) FILTER (WHERE kind = 'Daily'), 0) AS daily_sec,

                COUNT(*) FILTER (WHERE kind = 'Weekday') AS day_cnt,
                COALESCE(SUM(sec_num) FILTER (WHERE kind = 'Weekday'), 0) AS day_sec,

                COUNT(*) FILTER (WHERE kind = 'Weekly') AS weekly_cnt,
                COALESCE(SUM(sec_num) FILTER (WHERE kind = 'Weekly'), 0) AS weekly_sec,

                MAX(weekday_label) FILTER (WHERE kind = 'Weekday') AS d_of_w
            FROM norm
            GROUP BY d, eqp_id
        )
        SELECT
            a.d AS "date",
            a.d_of_w AS "d_of_w",
            a.eqp_id AS "eqp_id",
            a.daily_cnt AS "daily_cnt",
            ROUND(a.daily_sec, 3)  AS "daily_sec",
            a.day_cnt AS "day_cnt",
            ROUND(a.day_sec, 3)    AS "day_sec",
            a.weekly_cnt AS "weekly_cnt",
            ROUND(a.weekly_sec, 3) AS "weekly_sec",
            a.total_cnt AS "total_cnt",
            ROUND(a.total_sec, 3)  AS "total_sec"
        FROM agg a
        ORDER BY a.d, a.eqp_id
    </select>

</mapper>
üß© 2) Mapper Ïù∏ÌÑ∞ÌéòÏù¥Ïä§
ÏΩîÎìú Î≥µÏÇ¨
Java
package com.example.metrics;

import java.time.LocalDate;
import java.util.List;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import com.example.metrics.dto.RowEntity;

@Mapper
public interface MetricsMapper {
    List<RowEntity> selectMetricsRows(
        @Param("startDate") LocalDate startDate,
        @Param("endDate") LocalDate endDate,
        @Param("eqpIds") List<String> eqpIds
    );
}
üß© 3) DTO (RowEntity.java)
ÏΩîÎìú Î≥µÏÇ¨
Java
package com.example.metrics.dto;

import java.time.LocalDate;

public class RowEntity {
    private LocalDate date;
    private String dOfW;
    private String eqpId;

    private Integer dailyCnt;
    private Double  dailySec;

    private Integer dayCnt;
    private Double  daySec;

    private Integer weeklyCnt;
    private Double  weeklySec;

    private Integer totalCnt;
    private Double  totalSec;

    // --- getters / setters ---
    public LocalDate getDate() { return date; }
    public void setDate(LocalDate date) { this.date = date; }

    public String getDOfW() { return dOfW; }
    public void setDOfW(String dOfW) { this.dOfW = dOfW; }

    public String getEqpId() { return eqpId; }
    public void setEqpId(String eqpId) { this.eqpId = eqpId; }

    public Integer getDailyCnt() { return dailyCnt; }
    public void setDailyCnt(Integer dailyCnt) { this.dailyCnt = dailyCnt; }

    public Double getDailySec() { return dailySec; }
    public void setDailySec(Double dailySec) { this.dailySec = dailySec; }

    public Integer getDayCnt() { return dayCnt; }
    public void setDayCnt(Integer dayCnt) { this.dayCnt = dayCnt; }

    public Double getDaySec() { return daySec; }
    public void setDaySec(Double daySec) { this.daySec = daySec; }

    public Integer getWeeklyCnt() { return weeklyCnt; }
    public void setWeeklyCnt(Integer weeklyCnt) { this.weeklyCnt = weeklyCnt; }

    public Double getWeeklySec() { return weeklySec; }
    public void setWeeklySec(Double weeklySec) { this.weeklySec = weeklySec; }

    public Integer getTotalCnt() { return totalCnt; }
    public void setTotalCnt(Integer totalCnt) { this.totalCnt = totalCnt; }

    public Double getTotalSec() { return totalSec; }
    public void setTotalSec(Double totalSec) { this.totalSec = totalSec; }
}
üß© 4) Service Ïù∏ÌÑ∞ÌéòÏù¥Ïä§
ÏΩîÎìú Î≥µÏÇ¨
Java
package com.example.metrics;

import java.time.LocalDate;
import java.util.List;
import java.util.Map;

public interface MetricsService {
    List<com.example.metrics.dto.RowEntity> getRows(LocalDate start, LocalDate end, List<String> eqpIds);
    List<Map<String, Object>> getPivot(LocalDate start, LocalDate end, List<String> eqpIds);
}
üß© 5) ServiceImpl
ÏΩîÎìú Î≥µÏÇ¨
Java
package com.example.metrics;

import java.time.LocalDate;
import java.util.*;
import org.springframework.stereotype.Service;
import com.example.metrics.dto.RowEntity;

@Service
public class MetricsServiceImpl implements MetricsService {

    private final MetricsMapper mapper;

    public MetricsServiceImpl(MetricsMapper mapper) {
        this.mapper = mapper;
    }

    /** getRows: ÏøºÎ¶¨ Í≤∞Í≥ºÎ•º 'ÎÇ†Ïßú√óÏû•ÎπÑ' Ìñâ Í∑∏ÎåÄÎ°ú Î∞òÌôò */
    @Override
    public List<RowEntity> getRows(LocalDate start, LocalDate end, List<String> eqpIds) {
        return mapper.selectMetricsRows(start, end, eqpIds);
    }

    /** getPivot: ÎÇ†ÏßúÎ≥ÑÎ°ú Í∑∏Î£πÌïëÌïòÍ≥† by_eqpÏóê Ïû•ÎπÑÎ≥Ñ Î©îÌä∏Î¶≠ Îß§Ìïë (ÌîºÎ≤óÎßå ÏàòÌñâ) */
    @Override
    @SuppressWarnings("unchecked")
    public List<Map<String, Object>> getPivot(LocalDate start, LocalDate end, List<String> eqpIds) {
        List<RowEntity> rows = mapper.selectMetricsRows(start, end, eqpIds);
        Map<LocalDate, Map<String, Object>> byDate = new LinkedHashMap<>();

        for (RowEntity r : rows) {
            Map<String, Object> row = byDate.computeIfAbsent(r.getDate(), d -> {
                Map<String, Object> m = new LinkedHashMap<>();
                m.put("date", d);
                m.put("d_of_w", r.getDOfW());
                m.put("by_eqp", new TreeMap<String, Map<String, Object>>());
                return m;
            });

            Map<String, Map<String, Object>> byEqp = (Map<String, Map<String, Object>>) row.get("by_eqp");
            Map<String, Object> metrics = new LinkedHashMap<>(8);
            metrics.put("daily_cnt",  nz(r.getDailyCnt()));
            metrics.put("daily_sec",  r.getDailySec());
            metrics.put("day_cnt",    nz(r.getDayCnt()));
            metrics.put("day_sec",    r.getDaySec());
            metrics.put("weekly_cnt", nz(r.getWeeklyCnt()));
            metrics.put("weekly_sec", r.getWeeklySec());
            metrics.put("total_cnt",  nz(r.getTotalCnt()));
            metrics.put("total_sec",  r.getTotalSec());
            byEqp.put(r.getEqpId(), metrics);
        }

        return new ArrayList<>(byDate.values());
    }

    private static int nz(Integer v) { return v == null ? 0 : v; }
}
üß© 6) Controller
ÏΩîÎìú Î≥µÏÇ¨
Java
package com.example.metrics;

import java.time.LocalDate;
import java.util.*;
import java.util.stream.Collectors;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.web.bind.annotation.*;

@RestController
public class MetricsController {

    private final MetricsService service;

    public MetricsController(MetricsService service) {
        this.service = service;
    }

    @GetMapping("/api/metrics/pivot")
    public List<Map<String, Object>> getPivot(
        @RequestParam("startDate") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
        @RequestParam("endDate") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate,
        @RequestParam(value = "eqpIds", required = false) String eqpIdsCsv
    ) {
        List<String> eqpIds = parseCsv(eqpIdsCsv);
        return service.getPivot(startDate, endDate, eqpIds);
    }

    @GetMapping("/api/metrics/rows")
    public List<com.example.metrics.dto.RowEntity> getRows(
        @RequestParam("startDate") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
        @RequestParam("endDate") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate,
        @RequestParam(value = "eqpIds", required = false) String eqpIdsCsv
    ) {
        List<String> eqpIds = parseCsv(eqpIdsCsv);
        return service.getRows(startDate, endDate, eqpIds);
    }

    private static List<String> parseCsv(String csv) {
        if (csv == null || csv.trim().isEmpty()) return null;
        return Arrays.stream(csv.split(","))
                     .map(String::trim)
                     .filter(s -> !s.isEmpty())
                     .collect(Collectors.toList());
    }
}
üß© 7) Vue 2 (EqpPivotGrid.vue)
ÏΩîÎìú Î≥µÏÇ¨
Html
<template>
    <ag-grid-vue
        class="ag-theme-alpine"
        :columnDefs="columnDefs"
        :rowData="rowData"
        :defaultColDef="defaultColDef"
        :domLayout="'autoHeight'"
    />
</template>

<script>
import axios from 'axios'
import { AgGridVue } from 'ag-grid-vue'

export default {
    name: 'EqpPivotGrid',
    components: { AgGridVue },
    data() {
        return {
            columnDefs: [],
            rowData: [],
            defaultColDef: { sortable: true, resizable: true, filter: true },
            metricKeys: [
                'daily_cnt','daily_sec',
                'day_cnt','day_sec',
                'weekly_cnt','weekly_sec',
                'total_cnt','total_sec'
            ]
        }
    },
    created() {
        this.fetchData()
    },
    methods: {
        async fetchData() {
            const params = { startDate: '2025-10-07', endDate: '2025-10-13' }
            const res = await axios.get('/api/metrics/pivot', { params })
            const rows = res.data
            this.rowData = rows

            const eqpSet = new Set()
            for (const r of rows) {
                const byEqp = r.by_eqp || {}
                for (const k of Object.keys(byEqp)) {
                    eqpSet.add(k)
                }
            }
            const eqpList = Array.from(eqpSet).sort()
            this.columnDefs = this.buildColumnDefs(eqpList)
        },

        buildColumnDefs(eqpList) {
            const cols = []
            cols.push({ headerName: 'date', field: 'date', pinned: 'left' })
            cols.push({ headerName: 'd_of_w', field: 'd_of_w', pinned: 'left' })

            for (const eqp of eqpList) {
                const children = []
                for (const m of this.metricKeys) {
                    children.push({
                        headerName: m.replace('_', ' '),
                        colId: `${eqp}.${m}`,
                        valueGetter: p => p.data?.by_eqp?.[eqp]?.[m] ?? null,
                        valueFormatter: p => {
                            const v = p.value
                            if (v == null) return ''
                            if (m.endsWith('_sec')) {
                                return Number(v).toLocaleString(undefined, { maximumFractionDigits: 3 })
                            }
                            return v
                        },
                        type: m.endsWith('_sec') ? 'numericColumn' : undefined
                    })
                }
                cols.push({ headerName: eqp, marryChildren: true, children })
            }

            return cols
        }
    }
}
</script>
‚úÖ Î™®Îì† ÌååÏùºÏù¥ 4Ïπ∏ Îì§Ïó¨Ïì∞Í∏∞ ÏùºÍ¥Ä
‚úÖ SQL Î∞òÏò¨Î¶º ÏôÑÎ£å, JavaÎäî Í∑∏Î£πÌïëÎßå
‚úÖ VueÎäî ÎèôÏ†Å Ïª¨Îüº ÏûêÎèô ÌôïÏû•




<template>
    <ag-grid-vue
        class="ag-theme-alpine"
        :columnDefs="columnDefs"
        :rowData="rowData"
        :defaultColDef="defaultColDef"
        :domLayout="'autoHeight'"
        @grid-ready="onGridReady"
    />
</template>

<script>
import axios from 'axios'
import { AgGridVue } from 'ag-grid-vue'

export default {
    name: 'EqpPivotGrid',
    components: { AgGridVue },
    data() {
        return {
            columnDefs: [],
            rowData: [],
            defaultColDef: {
                sortable: true,
                resizable: true,
                filter: true,
                headerClass: 'left-header'   // Î™®Îì† Ìó§Îçî Ï¢åÏ∏° Ï†ïÎ†¨
            },
            // ÌéºÏπ® ÏÉÅÌÉúÏóêÏÑú Î≥¥Ïó¨Ï§Ñ Î©îÌä∏Î¶≠ (Ï†ëÌûò ÏÉÅÌÉúÎäî '-'Îßå)
            metricsOpen: [
                'daily_cnt','daily_sec',
                'day_cnt','day_sec',
                'weekly_cnt','weekly_sec',
                'total_cnt','total_sec'
            ]
        }
    },
    created() {
        this.fetchData()
    },
    methods: {
        async fetchData() {
            const params = { startDate: '2025-10-07', endDate: '2025-10-13' }
            const { data } = await axios.get('/api/metrics/pivot', { params })
            this.rowData = data

            // Î™®Îì† ÌñâÏóêÏÑú eqp Î™©Î°ù Ï∂îÏ∂ú
            const eqpList = Array.from(
                new Set(
                    data.flatMap(r => Object.keys(r.by_eqp || {}))
                )
            ).sort()

            this.columnDefs = this.buildColumnDefs(eqpList)
        },

        // Ìó§Îçî ÎùºÎ≤® Í∞ÑÎã® Ìè¨Îß∑
        label(m) { return m.replace('_', ' ') },

        // sec/cnt Í∞íÏùÄ Ïò§Î•∏Ï™Ω Ï†ïÎ†¨
        cellAlign(m) {
            return (m.endsWith('_sec') || m.endsWith('_cnt')) ? 'ag-right-aligned' : undefined
        },

        // Í∑∏Î£π Ï†ëÌûò/ÌéºÏπ® UI Ìè¨Ìï® Ïª¨Îüº Ï†ïÏùò
        buildColumnDefs(eqpList) {
            const cols = [
                { headerName: 'date', field: 'date', pinned: 'left' },
                { headerName: 'd_of_w', field: 'd_of_w', pinned: 'left' }
            ]

            for (const eqp of eqpList) {
                const children = []

                // 1) Ï†ëÌûò ÏÉÅÌÉú Ï†ÑÏö© ÎçîÎØ∏ Ïª¨Îüº: "-" (Ï†ëÌûàÎ©¥ Ïù¥Í≤ÉÎßå Î≥¥ÏûÑ)
                children.push({
                    headerName: '-',
                    colId: `${eqp}.__collapsed__`,
                    columnGroupShow: 'closed',
                    width: 40,
                    minWidth: 40,
                    maxWidth: 60,
                    suppressMenu: true,
                    sortable: false,
                    resizable: false,
                    filter: false,
                    valueGetter: () => null
                })

                // 2) ÌéºÏπ® ÏÉÅÌÉú: Ïã§Ï†ú Î©îÌä∏Î¶≠ Ïª¨ÎüºÎì§
                for (const m of this.metricsOpen) {
                    children.push({
                        headerName: this.label(m),
                        colId: `${eqp}.${m}`,
                        columnGroupShow: 'open',
                        valueGetter: p => p.data?.by_eqp?.[eqp]?.[m] ?? null,
                        type: m.endsWith('_sec') ? 'numericColumn' : undefined,
                        cellClass: this.cellAlign(m),
                        valueFormatter: p => {
                            const v = p.value
                            if (v == null) return ''
                            return m.endsWith('_sec') ? Number(v).toLocaleString(undefined, { maximumFractionDigits: 3 }) : v
                        }
                    })
                }

                cols.push({
                    headerName: eqp,
                    groupId: eqp,          // Ï¥àÍ∏∞ Ï†ëÌûò/ÌéºÏπ® Ï†úÏñ¥Ïö©
                    marryChildren: true,
                    children
                })
            }

            return cols
        },

        // Ï¥àÍ∏∞Ïóî Î™®Îëê Ï†ëÌûò ÏÉÅÌÉúÎ°ú ÏãúÏûë (ÏõêÌïòÎ©¥ open:trueÎ°ú Î∞îÍøîÎèÑ Îê®)
        onGridReady(params) {
            this.gridApi = params.api
            this.columnApi = params.columnApi
            const states = this.columnDefs
                .filter(c => c.groupId)
                .map(c => ({ groupId: c.groupId, open: false }))
            if (states.length) this.columnApi.setColumnGroupState(states)
        },

        // (ÏòµÏÖò) Ï†ÑÏ≤¥ ÌéºÏπ®/Ï†ëÌûò Î≤ÑÌäºÏö©
        expandAll() { this.columnApi.setColumnGroupState([{ groupId: null, open: true }]) },
        collapseAll() { this.columnApi.setColumnGroupState([{ groupId: null, open: false }]) }
    }
}
</script>

<style>
/* Ìó§Îçî ÌÖçÏä§Ìä∏ Ï¢åÏ∏° Ï†ïÎ†¨ (Í∞íÏùÄ Í∞úÎ≥Ñ cellClassÎ°ú Ïö∞Ï∏° Ï†ïÎ†¨) */
.ag-theme-alpine .left-header .ag-header-cell-label {
    justify-content: flex-start;
}
</style>





/**
 * Ïô∏Î∂ÄÏóêÏÑú Ìò∏Ï∂ú: sec/cnt Í≥ÑÏó¥ Ïª¨ÎüºÎßå ÌëúÏãú Ï†úÏñ¥
 * @param {string[]} metricList - Ïòà) ['dailySec','totalCnt'] (Ïπ¥Î©úÏºÄÏù¥Ïä§)
 *
 * ÎèôÏûë:
 *  - date, d_of_wÎäî ÏòÅÌñ• ÏóÜÏùå
 *  - Í∞Å eqp Í∑∏Î£πÏùò 'dailySec','totalCnt' Í∞ôÏùÄ Ïπ¥Î©úÏºÄÏù¥Ïä§ Î©îÌä∏Î¶≠Îßå ÎåÄÏÉÅ
 *  - Ï†ÑÎã¨Î∞õÏßÄ ÏïäÏùÄ sec/cnt Ïª¨ÎüºÏùÄ Ï†ÑÎ∂Ä Ïà®ÍπÄ
 *  - '-' ÎçîÎØ∏(Ï†ëÌûò ÌëúÏãú) Î∞è ÎπÑ-Ïà´Ïûê ÌïÑÎìúÎäî Í∑∏ÎåÄÎ°ú Ïú†ÏßÄ
 *
 * ÏÇ¨Ïö© Ïòà:
 *  this.$refs.eqpGrid.selectedCols(['dailySec','weeklySec']);
 */
selectedCols(metricList) {
    const api = this.columnApi || (this.$refs && this.$refs.agGrid && this.$refs.agGrid.columnApi);
    if (!api) return;

    // sec/cntÎßå ÎåÄÏÉÅÏúºÎ°ú ÏÇºÎäîÎã§ (Ïπ¥Î©úÏºÄÏù¥Ïä§ Ï†ëÎØ∏Ïñ¥)
    const isTargetMetric = (m) => /(?:Cnt|Sec)$/.test(m);

    // Ïú†Ìö®Ìïú ÎåÄÏÉÅÎßå SetÏúºÎ°ú Ï†ïÍ∑úÌôî
    const selected = new Set((metricList || []).filter(isTargetMetric));

    // columnDefsÏóêÏÑú eqp Í∑∏Î£π(children)Ïùò ÎåÄÏÉÅ Ïª¨Îüº colIdÎ•º ÏàòÏßë
    const allTargetColIds = [];
    const toShowColIds = [];

    for (const group of this.columnDefs) {
        if (!group || !group.groupId || !Array.isArray(group.children)) continue; // eqp Í∑∏Î£πÎßå
        const eqp = group.groupId;

        for (const child of group.children) {
            // child.colId ÌòïÏãù: `${eqp}.${metricKey}`
            if (!child || !child.colId || !child.colId.startsWith(eqp + '.')) continue;
            // Ï†ëÌûò ÎçîÎØ∏ '-' Ï†úÏô∏
            if (child.columnGroupShow === 'closed') continue;

            const metricKey = child.colId.slice(eqp.length + 1); // eqp. Ïù¥ÌõÑ Ï∂îÏ∂ú
            if (!isTargetMetric(metricKey)) continue; // sec/cntÎßå ÎåÄÏÉÅ

            allTargetColIds.push(child.colId);
            if (selected.has(metricKey)) {
                toShowColIds.push(child.colId);
            }
        }
    }

    // 1) Î™®Îì† ÎåÄÏÉÅ(sec/cnt) Ïª¨Îüº Ïà®ÍπÄ
    if (allTargetColIds.length) {
        api.setColumnsVisible(allTargetColIds, false);
    }
    // 2) ÏÑ†ÌÉùÎêú Í≤ÉÎßå Î≥¥Ïù¥Í∏∞
    if (toShowColIds.length) {
        api.setColumnsVisible(toShowColIds, true);
    }
}