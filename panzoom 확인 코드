async function initPanzoom(vm, refName = 'pzTarget') {
  // 0) ref → 실제 DOM
  let el = vm.$refs[refName];
  if (el && el.$el) el = el.$el;
  if (!el || !(el instanceof HTMLElement || el instanceof SVGElement)) {
    console.error('[pz] DOM ref가 아님/null');
    return;
  }

  const sameDoc = () => el?.ownerDocument === document;
  const isAttached = () =>
    !!el && (el.isConnected || (el.ownerDocument && el.ownerDocument.body.contains(el)));

  // (A) 초기 상태 로그
  console.log('[check:before]', {
    inSameDoc: sameDoc(),
    isConnected: isAttached(),
    root: el?.getRootNode?.()?.constructor?.name
  });

  // 1) “연결+동일문서”가 될 때까지 기다리되, 타임아웃 시 중단
  const waitUntil = (timeoutMs = 5000) => new Promise((resolve, reject) => {
    const ok = () => sameDoc() && isAttached();
    if (ok()) return resolve(true);

    let mo, timer, poll;
    const cleanup = () => { mo?.disconnect?.(); clearInterval(poll); clearTimeout(timer); };

    if ('MutationObserver' in window) {
      mo = new MutationObserver(() => { if (ok()) { cleanup(); resolve(true); } });
      try { mo.observe(document.documentElement, { childList: true, subtree: true }); } catch {}
    }
    poll = setInterval(() => { if (ok()) { cleanup(); resolve(true); } }, 32);
    timer = setTimeout(() => { cleanup(); reject(new Error('not-ready-timeout')); }, timeoutMs);
  });

  try {
    await waitUntil(5000);
  } catch (e) {
    console.warn('[pz] 준비 미완료(동일 문서/연결 아님). 초기화 중단.', e.message);
    return; // ✅ 준비 안 되면 여기서 종료
  }

  // 2) 대기 후 ref/엘리먼트 재확인 (리렌더/교체 대비)
  let cur = vm.$refs[refName];
  if (cur && cur.$el) cur = cur.$el;
  if (cur !== el) {
    console.warn('[pz] 대기 중 엘리먼트 교체 감지 → 재시도 필요');
    return;
  }
  if (!sameDoc()) {
    console.warn('[pz] 동일 문서 아님(ownerDocument !== document) → 부모 문서가 아닌 해당 문서 컨텍스트에서 초기화 필요');
    return;
  }

  // 3) 실제 초기화
  try {
    const panzoomFn = (typeof Panzoom === 'function' ? Panzoom : (Panzoom?.default || Panzoom));
    const pz = panzoomFn(el, { bounds: true, maxZoom: 5, minZoom: 0.2 });

    if (typeof pz?.zoomTo !== 'function' || typeof pz?.dispose !== 'function') {
      throw new Error('invalid instance');
    }

    vm.panzoomIns?.dispose?.();
    vm.panzoomIns = pz;
    console.log('[pz] init OK');
  } catch (e) {
    console.error('[pz] init FAIL:', e);
    console.log('[dump]', {
      inSameDoc: sameDoc(),
      isConnected: isAttached(),
      tag: el.tagName, id: el.id, cls: el.className
    });
  }
}