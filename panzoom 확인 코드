// import Panzoom from 'panzoom';  // 기존대로 사용

async function initPanzoom(vm, refName = 'pzTarget') {
  // 0) ref → 실제 DOM 보정
  let el = vm.$refs[refName];
  if (el && el.$el) el = el.$el;

  // 1) DOM 연결/동일 문서 확인 (width/height와 별개로 매우 중요)
  const inSameDoc = el?.ownerDocument === document;
  const isConnected = !!el?.isConnected || (el && document.body.contains(el));
  console.log('[pz:init] check', {
    tag: el?.tagName, inSameDoc, isConnected,
    root: el?.getRootNode?.()?.constructor?.name
  });
  if (!el || !(el instanceof HTMLElement || el instanceof SVGElement)) {
    console.error('[pz] ref가 DOM이 아님(또는 null). DOM 요소에 ref 달아주세요.');
    return;
  }

  // 2) “실제 표시·연결” 보장 (연결될 때까지 대기)
  await new Promise((resolve) => {
    const ready = () => {
      const ok = el && (el.isConnected || document.body.contains(el)) &&
                 el.ownerDocument === document;
      if (ok) {
        requestAnimationFrame(() => requestAnimationFrame(resolve)); // 2프레임 안정화
        return true;
      }
      return false;
    };
    if (ready()) return;
    let mo, t;
    if ('MutationObserver' in window) {
      mo = new MutationObserver(() => { if (ready()) { mo.disconnect(); } });
      mo.observe(document.documentElement, { childList: true, subtree: true });
    }
    t = setInterval(() => { if (ready()) { clearInterval(t); } }, 32);
    setTimeout(() => { mo?.disconnect?.(); clearInterval(t); resolve(); }, 1000);
  });

  // 3) 리렌더로 엘리먼트 교체 감시(초기화 도중 바뀌면 중단)
  const elAtStart = el;
  const stillSameEl = () => vm.$refs[refName] === elAtStart || vm.$refs[refName]?.$el === elAtStart;
  if (!stillSameEl()) {
    console.warn('[pz] 엘리먼트가 초기화 도중 교체됨. 재시도 필요.');
    return;
  }

  // 4) 중복 초기화 방지 및 안전 생성
  if (vm.panzoomIns?.dispose) {
    try { vm.panzoomIns.dispose(); } catch {}
    vm.panzoomIns = null;
  }

  try {
    const panzoomFn = (typeof Panzoom === 'function' ? Panzoom : (Panzoom?.default || Panzoom));
    const pz = panzoomFn(el, {
      bounds: true,
      maxZoom: 5,
      minZoom: 0.2,
    });
    // 인스턴스 검증
    if (typeof pz?.zoomTo !== 'function' || typeof pz?.dispose !== 'function') {
      throw new Error('Invalid panzoom instance');
    }

    // 5) 초기화 직후에도 같은 엘리먼트인지 최종 확인
    if (!stillSameEl()) {
      console.warn('[pz] init 직후 엘리먼트 교체 감지 → dispose 후 종료');
      try { pz.dispose(); } catch {}
      return;
    }

    vm.panzoomIns = pz;
    console.log('[pz] init OK');
  } catch (e) {
    console.error('[pz] init FAIL:', e);
    // 추가 진단 정보
    console.log('[pz] el dump', {
      tag: el.tagName, id: el.id, cls: el.className,
      isConnected: el.isConnected, inDoc: document.body.contains(el),
      ownerIsDoc: el.ownerDocument === document,
    });
  }
}