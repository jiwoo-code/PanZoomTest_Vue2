import panzoom from 'panzoom'

export default {
  data() {
    return {
      panzoomInstance: null,
      panzoomInitInProgress: false
    }
  },

  methods: {
    async initPanzoom(refName = 'pzTarget') {
      if (this.panzoomInstance || this.panzoomInitInProgress) {
        return
      }
      this.panzoomInitInProgress = true

      // 1) ref → 실제 DOM 보정
      let el = this.$refs[refName]
      if (!el) {
        this.panzoomInitInProgress = false
        return
      }
      if (!(el instanceof HTMLElement) && !(el instanceof SVGElement)) {
        if (el.$el && (el.$el instanceof HTMLElement || el.$el instanceof SVGElement)) {
          el = el.$el
        } else {
          this.panzoomInitInProgress = false
          return
        }
      }

      // 2) 동일 문서 + 연결 상태 준비 대기 (타임아웃 시 중단)
      const sameDoc = () => el && el.ownerDocument === document
      const isAttached = () =>
        el &&
        (el.isConnected || (el.ownerDocument && el.ownerDocument.body.contains(el)))

      const waitUntil = (timeoutMs) =>
        new Promise((resolve, reject) => {
          function ok() {
            return sameDoc() && isAttached()
          }
          if (ok()) {
            resolve(true)
            return
          }

          let mo = null
          let poll = null
          let timer = null

          function cleanup() {
            if (mo) {
              try { mo.disconnect() } catch (e) {}
              mo = null
            }
            if (poll) {
              clearInterval(poll)
              poll = null
            }
            if (timer) {
              clearTimeout(timer)
              timer = null
            }
          }

          if (typeof MutationObserver !== 'undefined') {
            try {
              mo = new MutationObserver(() => {
                if (ok()) {
                  cleanup()
                  resolve(true)
                }
              })
              mo.observe(document.documentElement, { childList: true, subtree: true })
            } catch (e) { /* noop */ }