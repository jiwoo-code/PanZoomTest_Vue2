
DTO에서 getKey()로 **원본 문자열(트림 처리된 결합값)**만 만들고,
실제 해시 변환은 별도 HashUtil에서 처리하는 건 관심사 분리도 되고 유지보수에도 좋아요.

아래에 그대로 코드 예시 드립니다.


---

Dto.java

import lombok.Getter;
import lombok.Setter;

@Getter
@Setter
public class MyDto {
    private String title;
    private String date;
    private String eqpId;
    private String type;

    /** title|date|eqpId|type (trim 처리) 반환 */
    public String getKey() {
        return trimToEmpty(title) + "|" +
               trimToEmpty(date)  + "|" +
               trimToEmpty(eqpId) + "|" +
               trimToEmpty(type);
    }

    private String trimToEmpty(String s) {
        return s == null ? "" : s.trim();
    }
}


---

HashUtil.java

import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public final class HashUtil {
    private HashUtil() {}

    public static String md5Hex(String input) {
        try {
            MessageDigest md = MessageDigest.getInstance("MD5");
            byte[] digest = md.digest(input.getBytes(StandardCharsets.UTF_8));
            StringBuilder sb = new StringBuilder(digest.length * 2);
            for (byte b : digest) sb.append(String.format("%02x", b));
            return sb.toString();
        } catch (NoSuchAlgorithmException e) {
            throw new IllegalStateException("MD5 알고리즘 사용 불가", e);
        }
    }
}


---

ServiceImpl.java

import org.springframework.stereotype.Service;

@Service
public class MyServiceImpl {

    public void aaa(MyDto dto) {
        // DTO에서 key 문자열 생성
        String key = dto.getKey();

        // 해시 변환
        String md5Hash = HashUtil.md5Hex(key);

        // 로그 또는 저장 처리
        System.out.println("생성된 MD5 해시: " + md5Hash);
    }
}


---

✅ 장점

DTO는 원본 데이터 + 파생 문자열까지만 책임

해시 변환은 전담 유틸에서 처리 → 재사용 용이

서비스 로직에서는 “문자열 생성 → 해시” 흐름이 깔끔하게 드러남



---

