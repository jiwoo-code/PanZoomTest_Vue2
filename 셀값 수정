

코어 로직을 전부 함수화해서 재활용·가독성을 높였습니다.

<template>
  <div class="popup">
    <!-- 👉 전체 저장 버튼 -->
    <sp-button
      small
      :disabled="!hasDirty"
      @click="saveAll"
      class="save-all-btn"
    >
      저장
    </sp-button>

    <!-- 👉 ag-Grid -->
    <ag-grid-vue
      class="ag-theme-balham"
      style="height:420px"
      :rowData="rowData"
      :columnDefs="columnDefs"
      :gridOptions="gridOptions"
      @grid-ready="onGridReady"
    />
  </div>
</template>

<script>
import axios from '@/plugins/axios';      // 프로젝트 axios 인스턴스

export default {
  /* 상위에서 권한 플래그만 내려줍니다. */
  props: { canEditRemark: Boolean },

  data() {
    return {
      gridApi  : null,
      hasDirty : false,                 // 저장 버튼 on/off
      rowData  : [],                    // (상위에서 fetch 후 props로 받아도 무방)

      /* ✅ 컬럼 정의 */
      columnDefs: [
        { field:'id', headerName:'ID', width:80 },

        { field:'remark',
          headerName:'비고',
          editable : () => this.canEditRemark,          // 권한 체크
          cellEditor: 'agLargeTextCellEditor',
          cellEditorParams:{ cols:28, rows:3 },

          /* 변경된 셀 배경 표시 */
          cellClassRules: {
            'cell-dirty': params => !!params.data.dirty
          }
        }
      ],

      /* ✅ grid 옵션 – onCellValueChanged 에서 더티 표시 */
      gridOptions: {
        defaultColDef: { resizable:true, sortable:true },
        onCellValueChanged: p => this.handleEdit(p)
      }
    };
  },

  /* methods ---------------------------------------------------- */
  methods: {
    onGridReady(p) { this.gridApi = p.api; },

    /* ① 셀 편집 → dirty 플래그 부여 + 저장버튼 활성 */
    handleEdit(p) {
      if (p.colDef.field === 'remark' && this.canEditRemark) {
        p.data.dirty = true;                     // 행 플래그
        this.hasDirty = true;
        // 해당 셀만 다시 렌더 (색상 반영)
        p.api.refreshCells({ rowNodes:[p.node], columns:['remark'] });
      }
    },

    /* ② 더티 행 모으기 */
    collectDirtyRows() {
      const list = [];
      this.gridApi.forEachNode(n => {
        if (n.data.dirty) list.push({ id:n.data.id, remark:n.data.remark });
      });
      return list;
    },

    /* ③ 저장 버튼 */
    async saveAll() {
      const payload = this.collectDirtyRows();
      if (!payload.length) return;

      try {
        await axios.post('/api/history/remark/updateBatch', payload);
        this.markClean();                 // 성공 후 초기화
        this.$toast.success('저장 완료');
      } catch (e) {
        console.error(e);
        this.$toast.error('저장 실패');
      }
    },

    /* ④ 성공 시 더티 플래그·하이라이트 제거 */
    markClean() {
      this.gridApi.forEachNode(n => {
        if (n.data.dirty) {
          n.data.dirty = false;
        }
      });
      this.hasDirty = false;
      this.gridApi.refreshCells({ force: true }); // 모든 셀 재랜더 → 색상 삭제
    }
  }
};
</script>

<style scoped>
.history-popup {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.save-all-btn {
  align-self: flex-end;
}

.cell-dirty {
  background-color: #fff5cc !important;   /* 연노랑 하이라이트 */
}
</style>

동작 요약

1. 비고(remark) 컬럼은 canEditRemark 가 true 일 때만 수정 가능.


2. 사용자가 편집하면 handleEdit() 이 행에 dirty=true 를 심고 저장 버튼 활성.


3. 저장 → collectDirtyRows() 로 더티 행만 payload 로 전송.


4. 성공 시 markClean() 으로 플래그 지우고 셀 하이라이트 제거.



> 모든 로직을 함수화(handleEdit · collectDirtyRows · markClean) 했기 때문에
추후 다른 팝업/페이지에서도 그대로 가져다 사용할 수 있습니다.



