public List<Map<String, Object>> getMergedEqpData(List<String> eqpIdList) {
    // 1. DB 조회 결과
    List<Map<String, Object>> dbResults = eqpMapper.selectEqpInfo(eqpIdList); // 예: eqpId, aaa, bbb

    // 2. 외부 API 병렬 호출
    Map<String, CompletableFuture<Map<String, Object>>> futureMap = eqpIdList.stream()
        .collect(Collectors.toMap(
            Function.identity(),
            eqpId -> CompletableFuture.supplyAsync(() -> callExternalApi(eqpId))
        ));

    // 3. 모든 Future 완료 대기 후 결과 수집
    Map<String, Map<String, Object>> apiResults = futureMap.entrySet().stream()
        .collect(Collectors.toMap(
            Map.Entry::getKey,
            entry -> entry.getValue().join()  // 예외 처리 필요 시 handle() 또는 exceptionally() 사용
        ));

    // 4. 병합 처리 (eqpId 기준)
    List<Map<String, Object>> merged = dbResults.stream()
        .map(dbRow -> {
            String eqpId = (String) dbRow.get("eqpId");
            Map<String, Object> mergedRow = new HashMap<>(dbRow);

            if (apiResults.containsKey(eqpId)) {
                mergedRow.putAll(apiResults.get(eqpId)); // 외부 API 데이터 병합
            }

            return mergedRow;
        })
        .collect(Collectors.toList());

    return merged;
}




ㅡㅡㅡㅡㅡㅡㅡㅡㅡ




Map<String, CompletableFuture<Map<String, Object>>> futureMap = new HashMap<>();

for (String eqpId : eqpIdList) {
    CompletableFuture<Map<String, Object>> future = CompletableFuture.supplyAsync(() -> {
        Map<String, Object> result = new HashMap<>();
        try {
            Map<String, Object> apiResult = externalApiService.getStatusMap(eqpId); // 외부 API 호출
            result.putAll(apiResult);
            result.put("status", true); // 200 성공일 때
        } catch (HttpClientErrorException e) {
            result.put("status", false); // 예외 발생
        } catch (Exception e) {
            result.put("status", false); // 기타 예외
        }
        return result;
    });

    futureMap.put(eqpId, future);
}





ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ



public List<FinalResultVo> getMergedResult(List<String> eqpIds) {
    // 1. 기존 쿼리 호출
    List<DataVo1> list1 = mapper.selectDataVo1(eqpIds);
    List<DataVo2> list2 = mapper.selectDataVo2(eqpIds);

    // 2. 외부 API 호출 결과 수집 (동기)
    Map<String, Object> apiResultMap = new HashMap<>();
    for (String eqpId : eqpIds) {
        try {
            Map<String, Object> result = externalService.callExternalApi(eqpId);
            result.put("status", true);  // 성공 시 status: true
            apiResultMap.put(eqpId, result);
        } catch (Exception e) {
            // 실패 시 기본 구조로 채움
            Map<String, Object> failedResult = new HashMap<>();
            failedResult.put("status", false);
            apiResultMap.put(eqpId, failedResult);
        }
    }

    // 3. 결과 병합
    return list1.stream().map(vo1 -> {
        String eqpId = vo1.getEqpId();
        DataVo2 matchedVo2 = list2.stream()
            .filter(vo2 -> vo2.getEqpId().equals(eqpId))
            .findFirst().orElse(null);

        Map<String, Object> apiResult = apiResultMap.getOrDefault(eqpId, Collections.emptyMap());

        // 빌더 또는 생성자로 병합 결과 생성
        return FinalResultVo.builder()
            .eqpId(eqpId)
            .aaa(vo1.getAaa())
            .bbb(matchedVo2 != null ? matchedVo2.getBbb() : null)
            .apiResult(apiResult)
            .build();
    }).collect(Collectors.toList());
}




@Builder
@Data
public class FinalResultVo {
    private String eqpId;
    private String aaa;
    private String bbb;
    private boolean status; // ✅ status 분리
    private Map<String, Object> apiResult;
}


return FinalResultVo.builder()
    .eqpId(eqpId)
    .aaa(vo1.getAaa())
    .bbb(matchedVo2 != null ? matchedVo2.getBbb() : null)
    .status((Boolean) apiResult.getOrDefault("status", false))  // ✅ 분리된 status
    .apiResult(apiResult)
    .build();


