public List<Map<String, Object>> getMergedEqpData(List<String> eqpIdList) {
    // 1. DB 조회 결과
    List<Map<String, Object>> dbResults = eqpMapper.selectEqpInfo(eqpIdList); // 예: eqpId, aaa, bbb

    // 2. 외부 API 병렬 호출
    Map<String, CompletableFuture<Map<String, Object>>> futureMap = eqpIdList.stream()
        .collect(Collectors.toMap(
            Function.identity(),
            eqpId -> CompletableFuture.supplyAsync(() -> callExternalApi(eqpId))
        ));

    // 3. 모든 Future 완료 대기 후 결과 수집
    Map<String, Map<String, Object>> apiResults = futureMap.entrySet().stream()
        .collect(Collectors.toMap(
            Map.Entry::getKey,
            entry -> entry.getValue().join()  // 예외 처리 필요 시 handle() 또는 exceptionally() 사용
        ));

    // 4. 병합 처리 (eqpId 기준)
    List<Map<String, Object>> merged = dbResults.stream()
        .map(dbRow -> {
            String eqpId = (String) dbRow.get("eqpId");
            Map<String, Object> mergedRow = new HashMap<>(dbRow);

            if (apiResults.containsKey(eqpId)) {
                mergedRow.putAll(apiResults.get(eqpId)); // 외부 API 데이터 병합
            }

            return mergedRow;
        })
        .collect(Collectors.toList());

    return merged;
}