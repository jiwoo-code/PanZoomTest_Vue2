/**
 * dummyData.js
 *
 * export function getDummyData(rowMin = 3, rowMax = 10)
 *  - 최소 rowMin, 최대 rowMax 개의 더미 데이터를 반환합니다.
 *  - 각 행(row)은 다음 컬럼을 가집니다.
 *    column1: 'yyyy-MM-dd HH:mm:ss'
 *    column2: 'EQPA01' ~ 'EQPA99'
 *    column3: 'yyyy-MM-dd'
 *    column4: 'PROGRESS' | 'SUCCESS' | 'FAIL'
 */

// 두 자리로 0-패딩
const pad = n => String(n).padStart(2, '0');

// 최근 1년 내 임의 날짜 반환
const randomDate = () =>
  new Date(Date.now() - Math.random() * 365 * 24 * 60 * 60 * 1000);

// ────────────────── 컬럼별 생성기 ──────────────────
const genDateTime = () => {
  const d = randomDate();
  return `${d.getFullYear()}-${pad(d.getMonth() + 1)}-${pad(d.getDate())} `
       + `${pad(d.getHours())}:${pad(d.getMinutes())}:${pad(d.getSeconds())}`;
};

const genDate = () => {
  const d = randomDate();
  return `${d.getFullYear()}-${pad(d.getMonth() + 1)}-${pad(d.getDate())}`;
};

const genEqpId = () => `EQPA${pad(Math.floor(Math.random() * 99) + 1)}`;

const statuses = ['PROGRESS', 'SUCCESS', 'FAIL'];
const genStatus = () => statuses[Math.floor(Math.random() * statuses.length)];

/**
 * 더미 데이터 생성
 * @param {number} rowMin 최소 행 수 (기본 3)
 * @param {number} rowMax 최대 행 수 (기본 10)
 * @returns {Array<Object>} 더미 데이터 배열
 */
export function getDummyData(rowMin = 3, rowMax = 10) {
  const rows = Math.max(rowMin, Math.floor(Math.random() * (rowMax - rowMin + 1)) + rowMin);
  return Array.from({ length: rows }, () => ({
    column1: genDateTime(),
    column2: genEqpId(),
    column3: genDate(),
    column4: genStatus()
  }));
}