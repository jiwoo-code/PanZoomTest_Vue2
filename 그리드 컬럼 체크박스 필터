// CheckboxFilter.js - 체크박스 필터 클래스
export class CheckboxFilter {
  constructor() {
    this.uniqueValues = [];
    this.selectedValues = new Set();
    this.filterParams = null;
    this.eGui = null;
    this.selectAllCheckbox = null;
    this.valueCheckboxes = new Map();
  }

  init(params) {
    this.filterParams = params;
    this.eGui = document.createElement('div');
    this.eGui.className = 'checkbox-filter-container';
    this.eGui.style.cssText = `
      padding: 8px;
      max-height: 300px;
      overflow-y: auto;
      min-width: 200px;
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
      font-size: 12px;
      background: #fff;
      border: 1px solid #BDC3C7;
      border-radius: 2px;
    `;

    // 컬럼의 모든 고유값 추출
    this.extractUniqueValues();
    
    // 처음에는 모든 값이 선택된 상태로 초기화
    this.selectedValues = new Set(this.uniqueValues);
    
    // UI 생성
    this.createFilterUI();
  }

  extractUniqueValues() {
    const values = new Set();
    const colId = this.filterParams.colDef.field;
    
    this.filterParams.api.forEachNode(node => {
      if (node.data && node.data[colId] !== null && node.data[colId] !== undefined) {
        const value = node.data[colId];
        if (value !== '') {
          values.add(String(value)); // 문자열로 변환하여 저장
        }
      }
    });
    
    this.uniqueValues = Array.from(values).sort();
    console.log('Extracted unique values:', this.uniqueValues); // 디버깅용
  }

  createFilterUI() {
    // 전체 선택/해제 체크박스
    const selectAllContainer = document.createElement('div');
    selectAllContainer.style.cssText = `
      padding: 4px 0 8px 0;
      border-bottom: 1px solid #BDC3C7;
      margin-bottom: 8px;
      font-weight: 600;
      color: #212529;
    `;

    this.selectAllCheckbox = document.createElement('input');
    this.selectAllCheckbox.type = 'checkbox';
    this.selectAllCheckbox.checked = true;
    this.selectAllCheckbox.style.marginRight = '6px';
    this.selectAllCheckbox.style.transform = 'scale(0.9)';

    const selectAllLabel = document.createElement('label');
    selectAllLabel.textContent = '전체 선택';
    selectAllLabel.style.cssText = `
      cursor: pointer;
      color: #212529;
      font-size: 12px;
    `;

    selectAllLabel.addEventListener('click', (e) => {
      e.preventDefault();
      this.toggleSelectAll();
    });

    this.selectAllCheckbox.addEventListener('change', () => {
      this.toggleSelectAll();
    });

    selectAllContainer.appendChild(this.selectAllCheckbox);
    selectAllContainer.appendChild(selectAllLabel);
    this.eGui.appendChild(selectAllContainer);

    // 각 값별 체크박스
    this.uniqueValues.forEach(value => {
      const checkboxContainer = document.createElement('div');
      checkboxContainer.style.cssText = `
        padding: 2px 0;
        display: flex;
        align-items: center;
        min-height: 20px;
      `;

      const checkbox = document.createElement('input');
      checkbox.type = 'checkbox';
      checkbox.checked = true;
      checkbox.style.cssText = `
        margin-right: 6px;
        transform: scale(0.9);
      `;

      const label = document.createElement('label');
      label.textContent = String(value);
      label.style.cssText = `
        cursor: pointer;
        flex: 1;
        word-break: break-word;
        color: #495057;
        font-size: 12px;
        line-height: 1.4;
      `;

      label.addEventListener('click', (e) => {
        e.preventDefault();
        checkbox.checked = !checkbox.checked;
        this.toggleValue(value, checkbox.checked);
      });

      checkbox.addEventListener('change', () => {
        this.toggleValue(value, checkbox.checked);
      });

      this.valueCheckboxes.set(value, checkbox);

      checkboxContainer.appendChild(checkbox);
      checkboxContainer.appendChild(label);
      this.eGui.appendChild(checkboxContainer);
    });

    // 버튼 컨테이너
    const buttonContainer = document.createElement('div');
    buttonContainer.style.cssText = `
      margin-top: 10px;
      padding-top: 10px;
      border-top: 1px solid #ddd;
      display: flex;
      gap: 5px;
    `;

    // 적용 버튼
    const applyButton = document.createElement('button');
    applyButton.textContent = '적용';
    applyButton.style.cssText = `
      padding: 5px 15px;
      background: #007acc;
      color: white;
      border: none;
      border-radius: 3px;
      cursor: pointer;
      font-size: 12px;
    `;
    applyButton.addEventListener('click', () => {
      this.filterParams.filterChangedCallback();
    });

    // 초기화 버튼
    const resetButton = document.createElement('button');
    resetButton.textContent = '초기화';
    resetButton.style.cssText = `
      padding: 5px 15px;
      background: #6c757d;
      color: white;
      border: none;
      border-radius: 3px;
      cursor: pointer;
      font-size: 12px;
    `;
    resetButton.addEventListener('click', () => {
      this.resetFilter();
    });

    buttonContainer.appendChild(applyButton);
    buttonContainer.appendChild(resetButton);
    this.eGui.appendChild(buttonContainer);
  }

  toggleSelectAll() {
    const isChecked = this.selectAllCheckbox.checked;
    
    if (isChecked) {
      this.selectedValues = new Set(this.uniqueValues);
    } else {
      this.selectedValues.clear();
    }

    // 모든 개별 체크박스 상태 업데이트
    this.valueCheckboxes.forEach((checkbox, value) => {
      checkbox.checked = isChecked;
    });

    this.filterParams.filterChangedCallback();
  }

  toggleValue(value, isChecked) {
    if (isChecked) {
      this.selectedValues.add(value);
    } else {
      this.selectedValues.delete(value);
    }

    // 전체 선택 체크박스 상태 업데이트
    this.updateSelectAllCheckbox();
    
    this.filterParams.filterChangedCallback();
  }

  updateSelectAllCheckbox() {
    const allSelected = this.selectedValues.size === this.uniqueValues.length;
    const noneSelected = this.selectedValues.size === 0;
    
    this.selectAllCheckbox.checked = allSelected;
    this.selectAllCheckbox.indeterminate = !allSelected && !noneSelected;
  }

  resetFilter() {
    this.selectedValues = new Set(this.uniqueValues);
    
    // 모든 체크박스 체크 상태로 변경
    this.selectAllCheckbox.checked = true;
    this.selectAllCheckbox.indeterminate = false;
    
    this.valueCheckboxes.forEach(checkbox => {
      checkbox.checked = true;
    });

    this.filterParams.filterChangedCallback();
  }

  getGui() {
    return this.eGui;
  }

  doesFilterPass(params) {
    // 모든 값이 선택된 경우 필터를 통과시킴
    if (this.selectedValues.size === this.uniqueValues.length) {
      return true;
    }
    
    const colId = this.filterParams.colDef.field;
    const value = params.data && params.data[colId] !== null && params.data[colId] !== undefined 
      ? String(params.data[colId]) 
      : '';
    
    console.log('Filtering value:', value, 'Selected values:', Array.from(this.selectedValues));
    return this.selectedValues.has(value);
  }

  isFilterActive() {
    return this.selectedValues.size < this.uniqueValues.length;
  }

  getModel() {
    return {
      selectedValues: Array.from(this.selectedValues)
    };
  }

  setModel(model) {
    if (model && model.selectedValues) {
      this.selectedValues = new Set(model.selectedValues);
      
      // UI 업데이트
      this.valueCheckboxes.forEach((checkbox, value) => {
        checkbox.checked = this.selectedValues.has(value);
      });
      
      this.updateSelectAllCheckbox();
    }
  }

  destroy() {
    // 정리 작업
    this.valueCheckboxes.clear();
  }
}

// Vue 컴포넌트에서 사용하는 방법
/*
<template>
  <div>
    <ag-grid-vue
      class="ag-theme-alpine"
      :columnDefs="columnDefs"
      :rowData="rowData"
      :gridOptions="gridOptions"
      style="width: 100%; height: 500px;"
    />
  </div>
</template>

<script>
import { AgGridVue } from 'ag-grid-vue';
import { CheckboxFilter } from './CheckboxFilter';

export default {
  components: {
    AgGridVue
  },
  data() {
    return {
      columnDefs: [
        {
          field: 'name',
          headerName: '이름',
          filter: CheckboxFilter,
          filterParams: {
            // 추가 파라미터가 필요한 경우 여기에 작성
          }
        },
        {
          field: 'category',
          headerName: '카테고리',
          filter: CheckboxFilter
        },
        {
          field: 'status',
          headerName: '상태',
          filter: CheckboxFilter
        }
      ],
      rowData: [
        { name: '홍길동', category: 'A', status: '활성' },
        { name: '김철수', category: 'B', status: '비활성' },
        { name: '이영희', category: 'A', status: '활성' },
        { name: '박민수', category: 'C', status: '대기' },
        { name: '정수정', category: 'B', status: '활성' }
      ],
      gridOptions: {
        defaultColDef: {
          sortable: true,
          filter: true,
          resizable: true
        }
      }
    };
  }
};
</script>
*/