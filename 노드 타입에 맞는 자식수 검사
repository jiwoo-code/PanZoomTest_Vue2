ㅑexport default {
  methods: {
    isValidNodeStructure(nodes, links) {
      // 각 노드의 자식 수를 계산
      const childCounts = links.reduce((acc, link) => {
        acc[link.from] = (acc[link.from] || 0) + 1;
        return acc;
      }, {});

      // 조건에 맞지 않는 노드 찾기
      const invalidNodes = nodes.filter(node => {
        const childCount = childCounts[node.id] || 0;
        switch (node.type) {
          case 'branch':
            return childCount !== 2;
          case 'loss':
            return childCount !== 1;
          case 'leaf':
            return childCount !== 0;
          default:
            return true; // 알 수 없는 타입은 invalid로 처리
        }
      });

      if (invalidNodes.length > 0) {
        const invalidNodeDetails = invalidNodes.map(node => {
          const childCount = childCounts[node.id] || 0;
          return `${node.id} (타입: ${node.type}, 자식 수: ${childCount})`;
        }).join(', ');

        return {
          isValid: false,
          message: `다음 노드들이 타입에 맞는 자식 수를 가지고 있지 않습니다: ${invalidNodeDetails}`
        };
      }

      return {
        isValid: true,
        message: "모든 노드가 타입에 맞는 올바른 자식 수를 가지고 있습니다."
      };
    }
  }
}


ㅡㅡㅡㅡ

logic 버전

function isValidNodeStructureLogic(logic) {
  const invalidNodes = Array.from(logic.values()).filter(node => {
    const childCount = [node.nextYesNodeId, node.nextNoNodeId].filter(Boolean).length;
    const expectedChildCount = { branch: 2, loss: 1, leaf: 0 }[node.type] ?? -1;
    return childCount !== expectedChildCount;
  }).map(node => `${node.nodeId} (타입: ${node.type}, 자식 수: ${[node.nextYesNodeId, node.nextNoNodeId].filter(Boolean).length})`);

  return invalidNodes.length === 0
    ? { isValid: true, message: "모든 노드가 타입에 맞는 올바른 자식 수를 가지고 있습니다." }
    : { isValid: false, message: `다음 노드들이 타입에 맞는 자식 수를 가지고 있지 않습니다: ${invalidNodes.join(', ')}` };
}
